openapi: 3.0.3
info:
  title: MQTT API reference
  description: MQTT OpenAPI endpoints - OpenAPI 3.0
  version: 1.0.0
servers:
  - url: https://api.swx.altairone.com
    description: SmartWorks
tags:
  - name: MQTT Credentials
    description: Operations with MQTT credentials
  - name: MQTT things
    description: Operations with thing MQTT credentials
  - name: MQTT labels
    description: Operations with label MQTT credentials
  - name: MQTT username
    description: Update MQTT password for a specific username
  - name: events
    description: Operations on events
  - name: models
    description: Operations on models
  - name: model-versions
    description: Operations on model-versions
  - name: items
    description: Operations on items
security:
  - bearerAuth: []
    OAuth2Security:
      - openid
      - offline
paths:
  "/spaces/{space}/collections":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
    post:
      tags:
        - collections
      summary: Create collection
      operationId: addCollection
      requestBody:
        description: Create a new collection in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponse"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    get:
      tags:
        - collections
      summary: List collections
      operationId: listCollections
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionListResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
    get:
      tags:
        - collections
      summary: Show collection
      operationId: showCollection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - collections
      summary: Update collection
      operationId: updateCollection
      requestBody:
        description: Update an existent collection by name
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionUpdateResponse"
    delete:
      tags:
        - collections
      summary: Delete collection
      operationId: deleteCollection
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
    post:
      tags:
        - things
      summary: Add a thing description
      description: Add a new thing description to the platform according to WoT
        specification
      operationId: addThing
      requestBody:
        description: Create a new thing description in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingCreateResponse"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingCreateResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    get:
      parameters:
        - $ref: "#/components/parameters/title"
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/thing-ids"
        - $ref: "#/components/parameters/next_cursor"
        - $ref: "#/components/parameters/previous_cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/links-rel"
        - $ref: "#/components/parameters/links-href"
      tags:
        - things
      summary: List thing descriptions
      description: List all thing descriptions in an array
      operationId: listThings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingListResponse"
          links:
            pagingNextPage:
              operationId: listThings
              parameters:
                next_cursor: $response.body#/paging/next_cursor
            pagingPreviousPage:
              operationId: listThings
              parameters:
                previous_cursor: $response.body#/paging/previous_cursor
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
    get:
      tags:
        - things
      summary: Show thing
      description: Show the thing description from a thing
      operationId: showThing
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - things
      summary: Update thing description
      description: Update the thing description from a thing by Id. You need to
        include the whole thing description with the modifications to update it.
      operationId: updateThing
      requestBody:
        description: Update an existent thing description by Id
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingUpdateResponse"
    delete:
      tags:
        - things
      summary: Delete thing
      description: Deletes all the existing information from a thing by Id. It deletes
        the thing description and the data.
      operationId: deleteThing
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingDeleteResponse"
        "204":
          description: The resource was deleted successfully.
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/reset-secret":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
    post:
      tags:
        - things
      summary: Reset Client Secret
      description: Reset the Client Secret for a specific thing
      operationId: ResetClientSecret
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secret"
        "401":
          $ref: "#/components/responses/Unauthorized"
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          $ref: "#/components/responses/Forbidden"
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "413":
          description: Payload Too Large
      deprecated: false
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/properties":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
    get:
      tags:
        - properties
      summary: List properties
      description: List all the properties from one thing in array
      operationId: listProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Properties"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - Properties
      summary: Update properties
      description: Update the value of one or more properties of a thing
      operationId: updateProperties
      requestBody:
        description: Property values by property key
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Properties"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Properties"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/properties/{property}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/property"
        in: path
        name: property
        required: true
        schema:
          type: string
          example: memory
    get:
      tags:
        - properties
      summary: Show property
      description: Show a property from one thing
      operationId: showProperty
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - properties
      summary: Update property
      description: Update the value of a property
      operationId: updateProperty
      requestBody:
        description: Update an existent thing by Id
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/action"
        in: path
        name: action
        required: true
        schema:
          type: string
          example: delay
    post:
      tags:
        - actions
      summary: Request action
      description: Request action and add it to the action queue from a thing
      operationId: addAction
      requestBody:
        description: Create a new action
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponseElement1"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponse"
              examples:
                ActionResponseElement:
                  $ref: "#/components/examples/ActionResponseElement1"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    get:
      tags:
        - actions
      summary: List the queue of actions from a thing
      description: Lists the current queue of a specific action from a Thing
      operationId: listActionsByName
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDelayListResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: integer
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
    get:
      tags:
        - actions
      summary: Lists all the action queues for a thing
      description: Lists all the queues for the different actions within a thing.
      operationId: listActions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionListResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}/{action-id}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/action"
        in: path
        name: action
        required: true
        schema:
          type: string
          example: delay
      - $ref: "#/components/parameters/action-id"
        in: path
        name: action-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01EDCAQE78A7CP6REXV5J8BAKR
    get:
      tags:
        - actions
      summary: Show action requested
      description: Shows a requested action from the action queues of a thing.
      operationId: showAction
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResponseElement1"
              examples:
                ActionResponseElement1:
                  $ref: "#/components/examples/ActionResponseElement1"
                ActionResponseElement2:
                  $ref: "#/components/examples/ActionResponseElement2"
                ActionResponseElement3:
                  $ref: "#/components/examples/ActionResponseElement3"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - actions
      summary: Update action inside a queue
      description: Update the status of an existing action by Id inside of the action
        queue from a thing
      operationId: updateAction
      requestBody:
        description: Update an existent thing by Id
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionUpdateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionUpdateResponse"
    delete:
      tags:
        - actions
      summary: Delete Action
      description: Deletes an existing action by Id
      operationId: deleteAction
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDeleteResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/events/{event}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/event"
        in: path
        name: event
        required: true
        schema:
          type: string
          example: highCPU
    post:
      tags:
        - events
      summary: Add event
      description: Add a new event to the event history of a thing
      operationId: addEvent
      requestBody:
        description: Create a new action
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
              examples:
                EventResponse:
                  $ref: "#/components/examples/EventResponse1"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    get:
      tags:
        - events
      summary: List history of one type of event
      description: List all history of one concrete event inside a thing
      operationId: listEventsByName
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHighCPUListResponse"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/events":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
    get:
      tags:
        - events
      summary: List history of all events
      description: List all history of all the events of a thing
      operationId: listEvents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHighCPUListResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things/{thing-id}/events/{event}/{event-id}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01edb9j75vymj8p7qppm19h8nx
      - $ref: "#/components/parameters/event"
        in: path
        name: event
        required: true
        schema:
          type: string
          example: highCPU
      - $ref: "#/components/parameters/event-id"
        in: path
        name: event-id
        required: true
        schema:
          type: string
          format: ulid
          example: 01EDCEZDTJX50SQTCJST5EW5NX
    get:
      tags:
        - events
      summary: Show event
      description: Show one specific event form a thing by Id
      operationId: showEvent
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
              examples:
                EventResponse1:
                  $ref: "#/components/examples/EventResponse1"
                EventResponse2:
                  $ref: "#/components/examples/EventResponse2"
  "/spaces/{space}/collections/{collection-name}/models":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
    post:
      tags:
        - models
      summary: Create model
      operationId: addModel
      requestBody:
        description: Create a new collection in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelResponse"
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    get:
      tags:
        - models
      summary: List models
      operationId: listModels
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelListResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/models/{model-name}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/model-name"
        in: path
        name: model-name
        required: true
        schema:
          type: string
          example: RaspberryPiModel
    get:
      tags:
        - models
      summary: Show model
      operationId: showModel
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - models
      summary: Update model
      operationId: updateModel
      requestBody:
        description: Update an existent model by name
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelUpdateResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    delete:
      tags:
        - models
      summary: Delete model
      operationId: deleteModel
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/models/{model-name}/versions":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/model-name"
        in: path
        name: model-name
        required: true
        schema:
          type: string
          example: RaspberryPiModel
    post:
      tags:
        - model-versions
      summary: Create version
      operationId: addVersion
      requestBody:
        description: Create a new collection in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelVersionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelVersionResponse"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelVersionResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    get:
      tags:
        - model-versions
      summary: List version
      operationId: listVersion
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelVersionListResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/models/{model-name}/versions/{version-name}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: model-name
        required: true
        schema:
          type: string
          example: RaspberryPiModel
      - $ref: "#/components/parameters/model-name"
        in: path
        name: version-name
        required: true
        schema:
          type: string
          example: RasPiv1
      - $ref: "#/components/parameters/version-name"
    get:
      tags:
        - model-versions
      summary: Show version
      operationId: showVersion
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelVersionResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    put:
      tags:
        - model-versions
      summary: Update version
      operationId: updateVersion
      requestBody:
        description: Update an existent model by name
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelVersionResponse"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelVersionResponse"
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
    delete:
      tags:
        - model-versions
      summary: Delete version
      operationId: deleteVersion
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/AlreadyExists"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Unexpected"
  "/spaces/{space}/collections/{collection-name}/things-status":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
    get:
      parameters:
        - $ref: "#/components/parameters/title"
        - $ref: "#/components/parameters/thing-ids"
        - $ref: "#/components/parameters/next_cursor"
        - $ref: "#/components/parameters/previous_cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/properties"
      tags:
        - items
      summary: List items
      operationId: listItems
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingStatusListResponse"
          links:
            pagingNextPage:
              operationId: listItems
              parameters:
                next_cursor: $response.body#/paging/next_cursor
            pagingPreviousPage:
              operationId: listItems
              parameters:
                previous_cursor: $response.body#/paging/previous_cursor
        "400":
          description: Bad Request
          content: {}
        "404":
          $ref: "#/components/responses/NotFound"
          description: Not Found
          content: {}
        "500":
          description: Internal Server Error
          content: {}
        default:
          $ref: "#/components/responses/Unexpected"
          content: {}
      x-codegen-request-body-name: body
  "/spaces/{space}/collections/{collection-name}/things-status/{thing-id}":
    parameters:
      - $ref: "#/components/parameters/space"
        in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - $ref: "#/components/parameters/collection-name"
        in: path
        name: collection-name
        required: true
        schema:
          type: string
          example: ElectronicBoards
      - $ref: "#/components/parameters/thing-id"
        in: path
        name: thing-id
        required: true
        schema:
          type: string
          format: ulid
          example: 87f87df8dfjhjdsksdsdk8fkff
    get:
      tags:
        - items
      summary: Show item
      operationId: showItem
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingStatusResponse"
        "400":
          description: Bad Request
          content: {}
        "404":
          $ref: "#/components/responses/NotFound"
          description: Not Found
          content: {}
        "500":
          description: Internal Server Error
          content: {}
        default:
          $ref: "#/components/responses/Unexpected"
      x-codegen-request-body-name: body
  "/spaces/{space}/functions":
    post:
      tags:
        - Functions
      summary: Create and deploy a function
      operationId: CreateFunction
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
      requestBody:
        description: Body of a new function
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Function"
            example:
              name: motion-detected
              description: This function will be invoked when motion is detected.
              template: python3-http
              env:
                MIN_DETECTION_EVENTS: "2"
                RESET_AFTER_SECONDS: "15"
              options:
                topics: living-room/motion,floor1/bathroom/light
                schedule: "*/5 * * * *"
              source:
                code: ZGVmIGhhbmRsZShyZXEpOgogICAgcmV0dXJuIHsKICAgICAgICAic3RhdHVzQ29kZSI6IDIwMSwKICAgICAgICAiYm9keSI6IHJlcS5ib2R5LmRlY29kZSgidXRmLTgiKQogICAgfQo=
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Function"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 409
                  message: This function already exists
        "413":
          description: Payload Too Large
      deprecated: false
    get:
      tags:
        - Functions
      summary: List Functions
      operationId: ListFunctions
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Functions"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
      deprecated: false
  "/spaces/{space}/functions/{function_name}":
    get:
      tags:
        - Functions
      summary: Get a function
      operationId: GetFunction
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Function"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
      deprecated: false
    put:
      tags:
        - Functions
      summary: Update a function
      operationId: UpdateFunction
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
      requestBody:
        description: Body of the updated function
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Function"
            example:
              id: 01EPEF6NB562TTT0C3XQ8VTXVG
              name: motion-detected
              description: This function will be invoked when motion is detected.
              template: python3-http
              env:
                MIN_DETECTION_EVENTS: "2"
                RESET_AFTER_SECONDS: "15"
              options:
                topics: living-room/motion,floor1/bathroom/light
                schedule: "*/5 * * * *"
              source:
                code: ZGVmIGhhbmRsZShyZXEpOgogICAgcmV0dXJuIHsKICAgICAgICAic3RhdHVzQ29kZSI6IDIwMSwKICAgICAgICAiYm9keSI6IHJlcS5ib2R5LmRlY29kZSgidXRmLTgiKQogICAgfQo=
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Function"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
      deprecated: false
    delete:
      tags:
        - Functions
      summary: Delete a function
      operationId: DeleteFunction
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
      deprecated: false
  "/spaces/{space}/functions/{function_name}/invoke":
    post:
      tags:
        - Functions
      summary: Invoke a function
      operationId: InvokeFunction
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
      requestBody:
        description: Optional data to pass to the function
        content:
          "*/*":
            schema:
              type: string
              format: binary
              example: '{"hello": "world"}'
        required: false
      responses:
        "200":
          description: Value returned from the function
          content:
            application/json:
              example:
                info: My function worked!
        "202":
          description: The function is not ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
        "413":
          description: Payload Too Large
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 500
                  message: "ZeroDivisionError at line 9: division by zero"
                  details:
                    exception_info: division by zero
                    exception_line_code: value = 100 / 0
                    exception_line_number: 9
                    exception_type: ZeroDivisionError
      deprecated: false
  "/spaces/{space}/functions/{function_name}/async-invoke":
    post:
      tags:
        - Functions
      summary: Invoke a function asynchronously
      operationId: InvokeFunctionAsync
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
        - in: header
          name: X-Callback-Url
          schema:
            type: string
          required: true
      requestBody:
        description: Optional data to pass to the function
        content:
          "*/*":
            schema:
              type: string
              format: binary
              example: '{"hello": "world"}'
        required: false
      responses:
        "202":
          description: Request accepted and queued or function not ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoResponse"
              examples:
                invoked:
                  summary: Function invoked successfully (success)
                  value: null
                not_ready:
                  summary: The function is not ready
                  value:
                    details: function not ready
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
        "413":
          description: Payload Too Large
      deprecated: false
  "/spaces/{space}/functions/{function_name}/logs":
    get:
      tags:
        - Functions
      summary: Get a list of the logs for a specific function
      operationId: GetFunctionLogs
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
        - name: since
          in: query
          description: Only return logs after a specific date (RFC3339)
          schema:
            type: string
        - name: tail
          in: query
          description: Sets the maximum number of log messages to return, <=0 means
            unlimited
          schema:
            type: integer
      responses:
        "200":
          description: Newline delimited stream of log messages
          content:
            application/x-ndjson:
              schema:
                $ref: "#/components/schemas/LogEntryList"
        "202":
          description: The function is not ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
        "500":
          description: Internal Server Error
          content: {}
  "/spaces/{space}/functions/{function_name}/code":
    get:
      tags:
        - Functions
      summary: Get the last version of the function code
      operationId: GetFunctionCode
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: function_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Function code encoded in Base64.
          content:
            application/x-ndjson:
              schema:
                $ref: "#/components/schemas/SourceCode"
        "202":
          description: The function is not ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: function not found
  "/spaces/{space}/triggers":
    post:
      tags:
        - Triggers
      summary: Create and deploy a trigger
      operationId: CreateTrigger
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
      requestBody:
        description: Body of a new trigger
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
            example:
              description: This trigger will subscribe to "https://mqtt-broker.com" broker.
              type: mqtt
              config:
                host: mqtt-broker.com
                port: 1883
                topics: room1/temperature,room2/humidity
                username: admin
                password: secret
                qos: 1
              callback_url: https://my-website.com/trigger-callback
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 409
                  message: This trigger already exists (REVIEW!!!)
        "413":
          description: Payload Too Large
      deprecated: false
    get:
      tags:
        - Triggers
      summary: List Triggers
      operationId: ListTriggers
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: query
          name: type
          required: false
          schema:
            type: string
            enum:
              - mqtt
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Triggers"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
      deprecated: false
  "/spaces/{space}/triggers/{trigger_id}":
    get:
      tags:
        - Triggers
      summary: Get a trigger
      operationId: GetTrigger
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: trigger_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: trigger not found
      deprecated: false
    put:
      tags:
        - Triggers
      summary: Update a trigger
      operationId: UpdateTrigger
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: trigger_id
          required: true
          schema:
            type: string
      requestBody:
        description: Body of the updated trigger
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
            example:
              id: 01ESGG55SK6861Y9B6HFVBQK54
              description: This trigger will subscribe to "https://mqtt-broker.com" broker.
              type: mqtt
              config:
                host: mqtt-broker.com
                port: 1883
                topics: room1/temperature,room2/humidity
                username: admin
                password: secret
                qos: 1
              callback_url: https://my-website.com/trigger-callback
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: trigger not found
      deprecated: false
    delete:
      tags:
        - Triggers
      summary: Delete a trigger
      operationId: DeleteTrigger
      parameters:
        - in: path
          name: space
          required: true
          schema:
            type: string
        - in: path
          name: trigger_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 401
                  message: Unauthenticated
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 403
                  message: Unauthorized
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error:
                  status: 404
                  message: trigger not found
      deprecated: false
  "/spaces/{space}/labels":
    parameters:
      - in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
    post:
      tags:
        - Label
      summary: Create label
      description: Send a new label to the platform
      operationId: createLabel
      requestBody:
        required: true
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/createLabel"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createLabelResponse"
    get:
      tags:
        - Label
      summary: List Labels
      description: List of all the labels for an space
      operationId: listLabel
      parameters:
        - in: query
          name: mqtt
          schema:
            type: boolean
          description: filter by labels with mqtt enabled
          example: true
        - in: query
          name: entity_id
          schema:
            type: string
          description: filter that shows labels of a certain entity
          example: 01EDVJEMFD24360JT7434A6GS8
        - in: query
          name: entity_type
          schema:
            type: string
          description: filter that shows labels of a certain entity type
          example: thing
        - in: query
          name: collection_name
          schema:
            type: string
          description: filter that shows labels of a certain collection. **Only available
            for thing entities**
          example: my-collection
        - in: query
          name: label_name
          schema:
            type: string
          description: filter that shows labels by label_name
          example: some-label
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelListResponse"
  "/spaces/{space}/labels/{label-id}":
    parameters:
      - in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - in: path
        name: label-id
        required: true
        schema:
          type: string
          example: 01EDVJEMFD24360JT7434A6GS8
    get:
      tags:
        - Label
      summary: Show Label
      description: Show an existing label by id
      operationId: showLabel
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelListElement1"
    put:
      tags:
        - Label
      summary: Update label
      description: Update an existing label
      operationId: updateLabel
      requestBody:
        required: true
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/createLabel"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createLabelResponse"
    delete:
      tags:
        - Label
      summary: Delete Label
      description: Deletes an existing label by id
      operationId: deleteLabel
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDeleteResponse"
  "/spaces/{space}/labels/{label-id}/relations":
    parameters:
      - in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
      - in: path
        name: label-id
        required: true
        schema:
          type: string
          example: 01EDVJEMFD24360JT7434A6GS8
    get:
      parameters:
        - in: query
          name: entity_type
          schema:
            type: string
            enum:
              - thing
              - function
              - build_config
              - resource
          description: filter that shows only entities of a certain type
          example: thing
        - in: query
          name: collection_name
          schema:
            type: string
          description: filter that shows only entities from a certain collection. **Only
            available for thing entities**
          example: 01EDVJEMFD24360JT7434A6GS8
        - in: query
          name: entity_id
          schema:
            type: string
          description: filter that shows only the entities that have this label
          example: 01EDVJEMFD24360JT7434A6GS8
      tags:
        - Label
      summary: Show Label Items
      description: Show an existing label by name and entities associated to it
      operationId: showLabelItems
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelListElementRelations"
    post:
      tags:
        - Label
      summary: Create label relation
      description: Assign an existing label to an existing entity by id
      operationId: createLabelRelation
      requestBody:
        required: true
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/createLabelRelation"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelRelationElement1"
    delete:
      parameters:
        - in: query
          name: entity_id
          required: true
          schema:
            type: string
          description: Removes label assigned to this entity_id
          example: 01EDVJEMFD24360JT7434A6GS8
      tags:
        - Label
      summary: Delete Label relation
      description: Delete a Label assignation for an specific entity
      operationId: delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDeleteResponse"
  "/spaces/{space}/labeled-entities":
    parameters:
      - in: path
        name: space
        required: true
        schema:
          type: string
          example: altair
    get:
      tags:
        - Labeled Entities
      description: Show entity_ids and their labels. At least one of the following
        parameters must be present **entity_id, entity_type, label_id,
        label_name**
      parameters:
        - in: query
          name: entity_id
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            - 01EDVJEMFD24360JT7434A6GS8
            - 01EDVJEMFD24360JT7434A6GS8
        - in: query
          name: label_id
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            - 01EDVJEMFD24360JT7434A6GS8
            - 01EDVJEMFD24360JT7434A6GS8
        - in: query
          name: label_name
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            - color:red
            - my-label
        - in: query
          name: entity_type
          required: true
          schema:
            type: string
            enum:
              - thing
              - function
              - build_config
              - resource
          description: filter that shows only a certain type of entity
          example: thing
        - in: query
          name: collection_name
          schema:
            type: string
          description: filter that shows entities and their labels of a certain
            collection. **Only available for thing entity type**
          example: my-collection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabeledListResponse"
  /oauth2/auth:
    parameters:
      - $ref: "#/components/parameters/client_id"
      - $ref: "#/components/parameters/response_type"
      - $ref: "#/components/parameters/response_mode"
      - $ref: "#/components/parameters/redirect_uri"
      - $ref: "#/components/parameters/state"
      - $ref: "#/components/parameters/scope"
      - $ref: "#/components/parameters/nonce"
      - $ref: "#/components/parameters/code_challenge_method"
      - $ref: "#/components/parameters/code_challenge"
    get:
      tags:
        - OAuth
      summary: OAuth 2.0 Authorize Endpoint
      operationId: GetOauth2Auth
      responses:
        "302":
          description: Found
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /oauth2/token:
    post:
      tags:
        - OAuth
      summary: OAuth 2.0 Token Endpoint
      description: >
        The client makes a request to the token endpoint by sending the
        following parameters using the

        `application/x-www-form-urlencoded` HTTP request entity-body.<br/>

        To perform this operation, you must be authenticated by means of one of the following methods: `basic`, `oauth2`.
      operationId: GetOauth2Token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRequest"
            example:
              grant_type: client_credentials
              client_id: my-client-id
              client_secret: my-client-secret
              code: vGwDK4N168Z6UrHmypDE9STaBRC5Sq1vWaRwkEInt2o.fGeErUUhkflixRBGUU1hSFR91GHqrmG5eCagfnqAoD8
              code_verifier: 92bGgipEveY72NCHxt6CzOv5pDJd3sOknhixr9Q5UjoiHl5p7iKhw7wVqOPkmC3QPoaAp88kbTfmBVmPN8srWFgrgfgrZacaoNz2pOd5AsjbDwknzigjrU28Rxy3FK49
              refresh_token: ALRL46Rb2YLVarjk8J7ywBqSAypkPt-hPzl3Cue1WbY.6frbcFJKuhd1ixtjLR5AUv0BPGsKSfkS1HB1TLG22u4
              redirect_uri: https://oauthdebugger.com/debug
              scope: openid offline
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
              example:
                access_token: oym1Jz02c3KoC5HpVTDZArCuF8CS5FsIjDzcaZYqRY4.JcMHgPo-cIZei-2biVt3SsyHiiiYT17PqSDi_833N8I
                expires_in: 604799
                id_token: eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzo2NDYwNjA3Mi05MTY1LTRiZTYtYmQ3Yi04ZDMyMmU2ZWQ3ZjciLCJ0eXAiOiJKV1QifQ.eyJhdF9oYXNoIjoiR1lPRDJDaFFiMFBpc0pLWW5qbDR5QSIsImF1ZCI6WyJhbHRhaXI6OnN0dWRpbyJdLCJhdXRoX3RpbWUiOjE1OTI1NjE0ODcsImVtYWlsIjoiYWx0YWlyQHNtYXJ0d29ya3MuY29tIiwiZXhwIjoxNTkyNTY1MDg5LCJpYXQiOjE1OTI1NjE0ODksImlzcyI6Imh0dHBzOi8vYXBpLmRldi5hbHRhaXJzYy5jb20vIiwianRpIjoiMWZmOTQ2MWEtYmM4Mi00MjUzLWE3NzgtYmMwNmY0Y2Q0OTM4IiwibGFzdF9uYW1lIjoiU21hcnRXb3JrcyIsIm5hbWUiOiJBbHRhaXIiLCJub25jZSI6Ijlla211NXpkdTYiLCJyYXQiOjE1OTI1NjE0NzUsInNpZCI6IjI1ZGIzMzdhLTQxNjktNGJlNC05MWZmLTc2OWNmNWZkNmY0YyIsInN1YiI6ImFsdGFpciIsInVzZXJuYW1lIjoiYWx0YWlyIn0.lDt8jfAkCC9g9Bt5iSz2rgCgC9JNXj-yZ-rs9l-_67eVxnKHu_hkb3vmQmk-k6jwx5pRjQ4_lqPQe-3GMS3C5Fl6DgxHDtDlzMnRUGKKRjTfUJy80Y0__mquYEhDGP9oxsLy39vHLpJVFj6Sx81owoixTW5ce1iGTJ2D3XcNjLooyg9Axa_mrSWBsZJoD-jaZZ7TTliz-jn1QBQbX3V-KCE2qFvcgAAJ8ppu9vEBiCDd95xoNgpF_6EEdYV3oPJgurNfagP4GEFNXSA9BlHNXb8PgFR32I_h_4oz4j3Lq8UW-V1FuldpytXSeJ1Lbh63g5vmbSdDgyuZz-uGHCDXRpcEQqj3fIdaey3TErhFI_G-RbA3xL6uRkMtMxK22e5oyUSbnd8RDhfwZB4E3q7KlDhQnpuZLat-OQ81NTLtC1ggNJgfzm3wlCIEfAeUbOae1hS2vXYJFWyQ8dl-_Kik7QAOSFPYhl3ipr58w13wmf9C9TVdlfZ-FxvTrTbMqjOibMGO4qlnuoo8CXLWIuWThRQgKTnK5CHpuDKBuH_tnL059k7weZwa4Vgk7wlrHPLPZVmg-b287zGx2OGZiS6VlYfoiIhQ_mY4fB1o2QEc4lPsgpe6JlTSCQ47VoEUvFzK83iI5pOhEKGFOSsSkAOSBvWjnOHrc9CvwYIZ7IkJIHQ
                scope: openid offline
                token_type: bearer
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /oauth2/revoke:
    post:
      tags:
        - OAuth
      summary: Revoke a token (Access or Refresh)
      description: >
        Revoking a token (both `access` and `refresh`) means that the tokens
        will be ***invalid***.<br/>

        A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer

        be used to refresh an access token.<br/>

        Revoking a refresh token also invalidates the access token that was created with it.<br/><br/>

        **A token may only be revoked by the client the token was generated for!!**: <br/> - This mean that you need put also in the

        body the keys `client_id` y `client secret`.'
      operationId: PostOauth2Revoke
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RevokeRequest"
            example:
              token: ALRL46Rb2YLVarjk8J7ywBqSAypkPt-hPzl3Cue1WbY.6frbcFJKuhd1ixtjLR5AUv0BPGsKSfkS1HB1TLG22u4
              client_id: my-client
              client_secret: my-strong-secret
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                error: invalid_request
                error_description: The request is missing a required parameter, includes an
                  invalid parameter value, includes a parameter more than once,
                  or is otherwise malformed
                error_hint: Make sure that the various parameters are correct, be aware of case
                  sensitivity and trim your parameters. Make sure that the
                  client you are using has exactly whitelisted the redirect_uri
                  you specified.
                status_code: 400
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /oauth2/sessions/logout:
    parameters:
      - $ref: "#/components/parameters/id_token_hint"
      - $ref: "#/components/parameters/post_logout_redirect_uri"
      - $ref: "#/components/parameters/state_optional"
    get:
      tags:
        - OAuth
      summary: Initialize & Complete User Logout
      description: >
        This endpoint initiates and completes user logout and initiates OpenID
        Connect Front-/Back-channel logout.<br/>

        A logout request may be initiated by the OpenID Provider (OP - **you**) or by the Relying Party (RP - the OAuth2 Client):

        - The OP-initiated flow does not need an `id_token_hint`, and it may neither define a state nor a `post_logout_redirect_uri`. (**You need a valid session cookie!!**)

        - The RP-initiated flow needs an `id_token_hint` and may optionally define state and `post_logout_redirect_uri`.<br/>

        Before the logout is completed, the user is redirected to the Logout UI to confirm the logout request.<br/>

        There are several possible pathways for executing this flow, explained in the following diagram:<br/><br/>

        <center><img width="60%" src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggVEQ7XG4gICAgSVtHRVQgL29hdXRoMi9zZXNzaW9uL2xvZ291dF0tLT58aGFzIGlkX3Rva2VuX2hpbnQqfFJQSVtSUC1pbml0aWF0ZWQgbG9nb3V0XTtcbiAgICBJW0dFVCAvb2F1dGgyL3Nlc3Npb24vbG9nb3V0XS0tPnxkb2VzIG5vdCBoYXZlIGlkX3Rva2VuX2hpbnQqfE9QSVtPUC1pbml0aWF0ZWQgbG9nb3V0XVxuT1BJLS0-fGhhcyBzdGF0ZSp8RVtFcnJvcl1cbk9QSS0tPnxoYXMgcG9zdF9sb2dvdXRfdXJpKnxFW0Vycm9yXVxuT1BJLS0-fGhhcyB2YWxpZCBzZXNzaW9uIGNvb2tpZXxMVUlbTG9nb3V0IFVJIHdpdGggP2xvZ291dF9jaGFsbGVuZ2U9Li4uXVxuT1BJLS0-fGhhcyBubyB2YWxpZCBzZXNpb24gY29va2llfEVuZFtSZXR1cm4gdG8gcG9zdF9sb2dvdXRfdXJsKioqXVxuUlBJLS0-fGhhcyBhY3RpdmUgc2Vzc2lvbioqKip8TFVJXG5SUEktLT58bm8gYWN0aXZlIHNlc3Npb24qKioqfFJQSTJcbkxVSS0tPnx2ZXJpZnkgbG9nb3V0IHJlcXVlc3R8TFVJXG5MVUktLT58cmVkaXJlY3Qgd2l0aCBsb2dvdXRfdmVyaWZpZXIqfFJQSTJbIC9vYXV0aDIvc2Vzc2lvbnMvbG9nb3V0P2xvZ291dF92ZXJpZmllcj0uLi5dXG5SUEkyLS0-fGV4ZWN1dGUgZnJvbnQvYmFja2NoYW5uZWwgbG9nb3V0LCByZXZva2UgY29va2llfFJQSTJcblJQSTItLT58UmVkaXJlY3QgdG98RW5kIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0"></center><br/>

        **Legend**:

        - **\***: This is a query parameter, for example <b>/oauth2/sessions/logout?id_token_hint=...</b>

        - **\*\*** Here, an **"active session"** implies that there has been at least one login request completed with `remember: true` for that user.

        If that's not the case, the system **"does not know"** what to do (because there has never been a session issued that was remembered - hence it's not possible to forget it).

        - **\*\*\***: Here, the **"valid session cookies"** implies that the browser has a valid authentication cookie when calling `/oauth2/sessions/logout`.

        - **\*\*\*\***: The `post_logout_redirect` defaults to the configuration value of `urls.post_logout_redirect`.

        If it's an RP-initiated flow and a `post_logout_redirect_uri` was set and that URL is in the array of the OAuth2 Client's `urls.post_logout_redirect`, the browser will be redirected there instead.
      operationId: GetOpenIdSessionsLogout
      responses:
        "302":
          description: Found
        "500":
          description: Internal Server Error
  /userinfo:
    get:
      tags:
        - OAuth
      summary: Get the Payload of the ID Token.
      description: >
        This endpoint returns the payload of the ID Token, including the
        idTokenExtra values, of the provided OAuth 2.0 Access Token.<br/>

        **NOT all info of this example is really included, this endpoint is high customizable, this is need added in the backend!**
      operationId: GetOpenIdUserInfo
      responses:
        "200":
          description: OK
          content:
            application/jwt:
              example: >
                eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzo2NDYwNjA3Mi05MTY1LTRiZTYtYmQ3Yi04ZDMyMmU2ZWQ3ZjciLCJ0eXAiOiJKV1QifQ.

                eyJhdWQiOltdLCJpc3MiOiJodHRwczovL2FwaS5kZXYuYWx0YWlyc2MuY29tLyIsInN1YiI6IiJ9.

                aXExIaq6TYP8b6xvgVMMd0XP_4F_CvZZCnV7PCOzD6558whwRht8wgvWuTH4FXySaMHMyZtzdi-bwGDmKZMnLqhOQxo6HFYZY2iI7vcaeAE7n4k0roi_8T0sWEML1SVmilcIGkykyJ_4eQaQf2FmJcqvaIXzr9vst0qf0GLTs9q5RnvsrlQvDTUB7GBmMa4TBppRGLiM-Iw0xmRUg2AJwi_kJYSGOeSNbIPDelzMA_etZNvfGZzoPZxPi3SvwMMR6vULjIGTWzdQnVvZqxm3Jd6QfejUlxFCbTNiSfWD2qFEPpazXU4-5WVx9u-HYrlt3ZdFjzh-JB_M-j5veTrZsE2173pZf_sjxYqY17mUQhBiZ41js_4HtYkUtch8BemA2FhpYCboWvyt2YXTgfSbn_KN43WZkYgWY6tmqbXgV7lsnCdCHYW5c8JXw-PQzL_rJ0htAaLdC4lgp_afdp5Z5c6u0YHbYZMWd4tMUgp8HJr2Eiy9Mv9vVg4aRi6hZ-BL9Cx9mRIBvceCkte7cPqL_x-4kOmOO4IEzFhV2uH16jkoqMX6ZWQCGgsWNyF2DAgZHFF6ip5MIcEu2uQyM9hqIjQ79LSmN6cGudvc2xKFc3_mlNXXRy7stnyCEYufSvlGxPpxzZfb2vv7kqBhwu--hcVhX67rkUjGLFWHIaIYLm0
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: request_unauthorized
                error_description: The request could not be authorized
                error_hint: Check that you provided valid credentials in the right format.
                status_code: 401
                error_debug: ": not_found"
                request_id: ""
        "500":
          description: Internal Server Error
  "/spaces/{space}/mqtt/credentials":
    parameters:
      - $ref: "#/components/parameters/space"
    get:
      tags:
        - MQTT Credentials
      summary: List MQTT credentials
      description: List of all MQTT credentials for an space
      operationId: ListMQTTcredentials
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCredentialsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/spaces/{space}/mqtt/credentials/{credentials-id}":
    parameters:
      - $ref: "#/components/parameters/space"
      - $ref: "#/components/parameters/credentials-id"
    get:
      tags:
        - MQTT Credentials
      summary: Show MQTT credentials
      description: Show an specific MQTT credentials by id
      operationId: showMQTTcredentials
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowCredentialsThingResponse"
        "400":
          $ref: "#/components/responses/CredentialsError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    put:
      tags:
        - MQTT Credentials
      summary: Update MQTT credentials
      description: Update an existing MQTT credentials. If you send an empty body, a
        random password will be generated
      operationId: updateMQTTcredentials
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMQTTCredentials"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMQTTCredentialsResponse"
        "400":
          $ref: "#/components/responses/BadFormedError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/spaces/{space}/mqtt/things/{thing-id}":
    parameters:
      - $ref: "#/components/parameters/space"
      - $ref: "#/components/parameters/thing-id"
    get:
      tags:
        - MQTT things
      summary: List Thing MQTT credentials
      description: Shiw an specific MQTT credentials for a specific thing
      operationId: listThingMQTTcredentials
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowCredentialsThingResponse"
        "400":
          $ref: "#/components/responses/RelationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/spaces/{space}/mqtt/labels":
    parameters:
      - $ref: "#/components/parameters/space"
    post:
      tags:
        - MQTT labels
      summary: Create MQTT credentials for label
      description: Create MQTT credentials for a specific label
      operationId: createMQTTLabelCredentials
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMQTTLabelCredentials"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMQTTLabelCredentialsResponse"
        "400":
          $ref: "#/components/responses/BadFormedError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  "/spaces/{space}/mqtt/labels/{label-id}":
    parameters:
      - $ref: "#/components/parameters/space"
      - $ref: "#/components/parameters/label-id"
    get:
      tags:
        - MQTT labels
      summary: Show MQTT label details
      description: Show MQTT label details for a specific label
      operationId: showMQTTLabelInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowMQTTLabelResponse"
        "400":
          $ref: "#/components/responses/CredentialsError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    put:
      tags:
        - MQTT labels
      summary: Update MQTT Label
      description: Update the MQTT Label credentials and / or state
      operationId: updateMQTTLabel
      requestBody:
        description: This is the field that you can update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMQTTLabelCredentials"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMQTTLabelCredentialsResponse"
        "400":
          $ref: "#/components/responses/BadFormedError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - MQTT labels
      summary: Delete MQTT label
      description: Delete MQTT capabilities for a label
      operationId: DeleteMQTTLabel
      responses:
        "204":
          description: The resource was deleted successfully
        "400":
          $ref: "#/components/responses/CredentialsError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  "/spaces/{space}/mqtt/credentials-username/{mqtt-username}":
    parameters:
      - $ref: "#/components/parameters/space"
      - $ref: "#/components/parameters/mqtt-username"
      - in: path
        name: mqtt-username
        required: true
        schema:
          type: string
          example: newUsername@altair
    patch:
      tags:
        - MQTT username
      summary: Update MQTT password
      description: Update the MQTT password for a specific mqtt-username.  If you send
        an empty body, a random password will be generated
      operationId: updateMQTTpassword
      requestBody:
        description: This is the field that you can update
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMQTTPassword"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMQTTCredentialsResponse"
        "400":
          $ref: "#/components/responses/BadFormedError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Opaque JWT
    OAuth2Security:
      type: oauth2
      description: OAuth2 Flows Setup
      flows:
        authorizationCode:
          authorizationUrl: http://127.0.0.1:4444/oauth2/auth
          tokenUrl: http://127.0.0.1:4444/oauth2/token
          refreshUrl: http://127.0.0.1:4444/oauth2/token
          scopes:
            openid: OpenID Connect scope
            offline: Offline scope
        clientCredentials:
          tokenUrl: http://127.0.0.1:4444/oauth2/token
          refreshUrl: http://127.0.0.1:4444/oauth2/token
          scopes:
            openid: OpenID Connect scope
            offline: Offline scope
  parameters:
    space:
      in: path
      name: space
      required: true
      schema:
        type: string
        example: altair
    collection-name:
      in: path
      name: collection-name
      required: true
      schema:
        type: string
        example: ElectronicBoards
    thing-id:
      in: path
      name: thing-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01ed9jencjshpv374k15k1w2gr
    property:
      in: path
      name: property
      required: true
      schema:
        type: string
        example: memory
    event:
      in: path
      name: event
      required: true
      schema:
        type: string
        example: highCPU
    event-id:
      in: path
      name: event-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01EDCEZDTJX50SQTCJST5EW5NX
    action:
      in: path
      name: action
      required: true
      schema:
        type: string
        example: delay
    action-id:
      in: path
      name: action-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01EDCAQE78A7CP6REXV5J8BAKR
    model-name:
      in: path
      name: model-name
      required: true
      schema:
        type: string
        example: RaspberryPiModel
    version-name:
      in: path
      name: version-name
      required: true
      schema:
        type: string
        example: RasPiv1
    title:
      in: query
      name: title
      schema:
        type: string
      description: Filter by title
      example: MainThing
    type:
      in: query
      name: "@type"
      schema:
        type: string
      description: Filter by @type
      example: cluster
    thing-ids:
      in: query
      name: thingID[]
      schema:
        type: array
        items:
          type: string
      description: Filter by multiple thing ids
      examples:
        oneId:
          summary: Example of a single thingID
          value:
            - 01EDVJEMFD24360JT7434A6GS8
        multipleIds:
          summary: Example of multiple thingIDs
          value:
            - 01EDVJEMFD24360JT7434A6GS8
            - 01F53PMHJGCPSZX95QFJJEADS4
    next_cursor:
      in: query
      name: next_cursor
      schema:
        type: string
      description: next cursor used to go to the next page of results
      example: WyIwMUY1M1BNSEpHQ1BTWlg5NVFGSkpFQURTNCJd
    previous_cursor:
      in: query
      name: previous_cursor
      schema:
        type: string
      description: previous cursor used to go to the previous page of results
      example: WyIwMUY1M1BNSEpHQ1BTWlg5NVFGSkpFQURTNCJd
    limit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 50
      description: The numbers of items to return
      example: 50
    sort:
      in: query
      name: sort
      schema:
        type: array
        items:
          type: string
      explode: false
      style: form
      description: sort items by field asc or desc
      examples:
        oneId:
          summary: Example of a single sort field
          value:
            - +title
        multipleIds:
          summary: Example of multiple sort fields
          value:
            - +title
            - +uid
    properties:
      in: query
      name: property
      schema:
        type: object
      explode: true
      example: '{"property:temp":"gt:20", "property:dim": 80}'
      description: |
        Schema:

            {"property:<property_name>":"<operator>:<value>"}

        Supported value operators:
          * eq  == (operator by default)
          * neq !=
          * gt  >
          * gte >=
          * lt  <
          * lte <=
    links-rel:
      in: query
      name: links.rel
      schema:
        type: string
      description: Filter by type of link relationship
      example: controlledBy
    links-href:
      in: query
      name: links.href
      schema:
        type: string
      description: Filter by link href
      example: https://www.w3.org/TR/wot-thing-description/
    client_id:
      in: query
      name: client_id
      schema:
        type: string
      description: >
        Every client (**Website (MVC)**, **Website (SPA)**, **Mobile App**,
        **Client (Service)**...) is identified by a client ID. <br/>

        Unlike a client secret, the client ID is a public value that does not have to be protected.
      example: my-client-id
      required: true
    response_type:
      in: query
      name: response_type
      schema:
        type: string
      description: |
        Expected response type:
        - `code`
        - `token`
        - `id_token`
        - ***hybrid*** (The follow keys are admited):
          - `code` + `token`
          - `code` + `token` + `id_token`
          - `code` + `id_token`
      allowEmptyValue: false
      example: code
      required: true
    response_mode:
      in: query
      name: response_mode
      schema:
        type: string
      description: Expected response mode (`query`, `form_post`, `fragment`)
      allowEmptyValue: false
      required: true
      example: form_post
    redirect_uri:
      in: query
      name: redirect_uri
      schema:
        type: string
      description: It tells the issuer where to redirect the browser back to when the
        flow is done.
      example: https://oauthdebugger.com/debug
      required: true
    state:
      in: query
      name: state
      schema:
        type: string
      description: The `state` is an value that is carried through the whole flow and
        returned to the client.<br/> This is used to prevent [CSRF
        attacks](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29).
      example: 44f8343d-6f33-4f1e-b247-e91c535e3296
      required: true
    scope:
      in: query
      name: scope
      schema:
        type: string
      description: >
        Clients can request **additional information** or **'permissions'** via
        `scopes`.<br/>

        Additionally, we have pre-defined OAuth 2.0 Scope values:

        - `offline_access`: Include this scope if you wish to receive a refresh token.

        - `offline`: alias for `offline_access`.

        - `openid`: Include this scope if you wish to perform an OpenID Connect request.
      example: openid offline
      required: true
    nonce:
      in: query
      name: nonce
      schema:
        type: string
      description: A **nonce** (or number used once) is a random value that is used to
        prevent [replay attacks](https://en.wikipedia.org/wiki/Replay_attack).
      example: 4g7fvh6lhli
      required: false
    code_challenge_method:
      in: query
      name: code_challenge_method
      schema:
        type: string
      description: For [**PKCE**](https://tools.ietf.org/html/rfc7636) is
        **required**!!, can be `plain` (raw
        [***code_verifier***](https://tools.ietf.org/html/rfc7636#page-8)
        **NOT** recommended) or `S256`
        (***BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))***).
      example: S256
      required: true
    code_challenge:
      in: query
      name: code_challenge
      schema:
        type: string
      description: >
        For [**PKCE**](https://tools.ietf.org/html/rfc7636) is **required**!!, a
        challenge derived from the
        [***code_verifier***](https://tools.ietf.org/html/rfc7636#page-8) to be
        verified against later:
              <br/>
              - `code_verifier`: ***High-entropy cryptographic random STRING using the unreserved characters [A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~",
                <br/>with a minimum length of 43 characters and a maximum length of 128 characters.***
      example: E3gptgCg6douTv-FoV2tEbTulu0F9yCLURgDX-flOZM
      required: true
    id_token_hint:
      in: query
      name: id_token_hint
      schema:
        type: string
      description: >
        When the user is redirected to the logout endpoint in a web site or
        similar, they will be prompted if

        they really want to sign-out.<br/> This prompt can be bypassed by a client sending the original `id_token`

        received from authentication.<br/> This is passed as a query string parameter called `id_token_hint`.
      example: eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzcyI6ICJodHRw
        Oi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5NzYxMDAxIiw
        KICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZfV3pBMk1qIi
        wKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5NzAKfQ.ggW8hZ
        1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6qJp6IcmD3HP9
        9Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJNqeGpe-gccM
        g4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7TpdQyHE5lcMiKP
        XfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoSK5hoDalrcvR
        YLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4XUVrWOLrLl0
        nx7RkKU8NXNHq-rvKMzqg
      required: false
    post_logout_redirect_uri:
      in: query
      name: post_logout_redirect_uri
      schema:
        type: string
      description: >
        If a valid `id_token_hint` is passed, then the client may also send a
        `post_logout_redirect_uri` parameter.<br/>

        This can be used to allow the user to redirect back to the client after sign-out.<br/>

        The value must match one of the client’s pre-configured `post_logout_redirect_uri`.
      allowEmptyValue: false
      example: http://localhost:8080/index.html
      required: false
    state_optional:
      in: query
      name: state
      schema:
        type: string
      description: The `state` is an value that is carried through the whole flow and
        returned to the client.<br/> This is used to prevent [CSRF
        attacks](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29).
      example: 44f8343d-6f33-4f1e-b247-e91c535e3296
      required: false
    credentials-id:
      in: path
      name: credentials-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01EDRMFZXHPEBGGHZBYVV1W0Y9
    label-id:
      in: path
      name: label-id
      required: true
      schema:
        type: string
        example: 01EDRHEF2Y4ZB7C0EGTAT8RQQS
    mqtt-username:
      in: path
      name: mqtt-username
      required: true
      schema:
        type: string
        example: newUsername@altair
  schemas:
    AnyValue:
      nullable: true
      description: Can be any value, including `null`
      example: Can be any value, including `null`
    BaseError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 403
            message:
              type: string
              example: Access credentials are not sufficient to access this resource
            status:
              type: string
              example: Forbidden
    AuthZError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 401
            message:
              type: string
              example: Access credentials are invalid
            reason:
              type: string
              example: Access token i says token is not active
            status:
              type: string
              example: Unauthorized
    CollectionRequest:
      properties:
        name:
          type: string
          example: ElectronicBoards
        description:
          type: string
          example: My collection
    CollectionResponse:
      type: object
      properties:
        name:
          type: string
          example: ElectronicBoards
        description:
          type: string
          example: My collection
      example:
        name: ElectronicBoards
        description: My collection
    CollectionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CollectionResponse"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
      example:
        data:
          - name: ElectronicBoards
            description: My collection
        paging:
          next_cursor: ""
          previous_cursor: ""
    CollectionUpdateRequest:
      properties:
        title:
          type: string
          example: ElectronicBoards
        description:
          type: string
          example: My electronic boards collection
    CollectionUpdateResponse:
      type: object
      properties:
        name:
          type: string
          example: ElectronicBoards
        description:
          type: string
          example: My electronic boards collection
        title:
          type: string
          example: ElectronicBoards
      example:
        name: ElectronicBoards
        description: My electronic boards collection
    ThingRequest:
      properties:
        title:
          type: string
          example: SmartWorks Device
        description:
          type: string
          example: My connected SmartWorks device
        properties:
          type: object
          properties:
            cpu:
              $ref: "#/components/schemas/PropertyCPU"
            disk:
              $ref: "#/components/schemas/PropertyDisk"
            memory:
              $ref: "#/components/schemas/PropertyMemory"
          additionalProperties: {}
          example:
            cpu:
              title: CPU %
              description: Device CPU usage in percent
              type: number
              unit: percent
              readOnly: false
            disk:
              title: Disk %
              description: Device Disk usage in percent
              type: number
              unit: percent
              readOnly: false
            memory:
              title: Memory %
              description: Device Memory usage in percent
              type: number
              unit: percent
              readOnly: false
        actions:
          type: object
          properties:
            delay:
              $ref: "#/components/schemas/ActionDelay"
            reboot:
              $ref: "#/components/schemas/ActionReboot"
          additionalProperties: {}
          example:
            delay:
              title: Delay
              description: Change sending frequency
              input:
                properties:
                  input:
                    maximum: 100
                    minimum: 3
                    type: number
            reboot:
              title: Reboot
              description: Reboot device
        events:
          type: object
          properties:
            highCPU:
              $ref: "#/components/schemas/EventHighCPU"
          additionalProperties: {}
          example:
            highCPU:
              title: High CPU
              description: The CPU usage is over 50%
              data:
                type: number
                unit: percent
    ThingUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: SmartWorks Device updated
        description:
          type: string
          example: My connected SmartWorks device updated
        properties:
          type: object
          properties:
            cpu:
              $ref: "#/components/schemas/PropertyCPU"
            disk:
              $ref: "#/components/schemas/PropertyDisk"
            memory:
              $ref: "#/components/schemas/PropertyMemory"
          additionalProperties: {}
          example:
            cpu:
              title: CPU %
              description: Device CPU usage in percent
              type: number
              unit: percent
              readOnly: false
            disk:
              title: Disk %
              description: Device Disk usage in percent
              type: number
              unit: percent
              readOnly: false
            memory:
              title: Memory %
              description: Device Memory usage in percent
              type: number
              unit: percent
              readOnly: false
        actions:
          type: object
          properties:
            delay:
              $ref: "#/components/schemas/ActionDelay"
            reboot:
              $ref: "#/components/schemas/ActionReboot"
          additionalProperties: {}
          example:
            delay:
              title: Delay
              description: Change sending frequency
              input:
                properties:
                  input:
                    maximum: 100
                    minimum: 3
                    type: number
            reboot:
              title: Reboot
              description: Reboot device
        events:
          type: object
          properties:
            highCPU:
              $ref: "#/components/schemas/EventHighCPU"
          additionalProperties: {}
          example:
            highCPU:
              title: High CPU
              description: The CPU usage is over 50%
              data:
                type: number
                unit: percent
    ThingCreateResponse:
      type: object
      properties:
        id:
          type: string
          example: https://api.dev.altairsc.com/spaces/altair/things/01edb9j75vymj8p7qppm19h8nx
        uid:
          type: string
          example: 01edb9j75vymj8p7qppm19h8nx
        title:
          type: string
          example: SmartWorks Device
        description:
          type: string
          example: My connected SmartWorks device
        space:
          type: string
          example: altair
        collection:
          type: string
          example: ElectronicBoards
        model:
          type: string
          properties:
            name:
              type: string
              example: ""
            version:
              type: number
              example: 0
          example: ""
        credentials:
          type: object
          properties:
            http:
              type: object
              properties:
                client_id:
                  type: string
                  example: altair::01edb9j75vymj8p7qppm19h8nx
                client_secret:
                  type: string
                  example: SIZ2.izCuTf_PwbOsbnQekaJNz
            mqtt:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    username:
                      type: string
                      example: RxAg@altair
                    pwd:
                      type: string
                      example: B4NQRtm2lvku2sTv
                thing:
                  type: object
                  properties:
                    username:
                      type: string
                      example: GTdn@altair
                    pwd:
                      type: string
                      example: CwPEX4QRcP7JQTAu
        properties:
          type: object
          properties:
            cpu:
              $ref: "#/components/schemas/PropertyCPUResponse"
            disk:
              $ref: "#/components/schemas/PropertyDiskResponse"
            memory:
              $ref: "#/components/schemas/PropertyMemoryResponse"
          additionalProperties: {}
          example:
            cpu:
              title: CPU %
              description: Device CPU usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/cpu
            disk:
              title: Disk %
              description: Device Disk usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/disk
            memory:
              title: Memory %
              description: Device Memory usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/memory
        actions:
          type: object
          properties:
            delay:
              $ref: "#/components/schemas/ActionDelayResponse"
            reboot:
              $ref: "#/components/schemas/ActionRebootResponse"
          additionalProperties: {}
          example:
            delay:
              title: Delay
              description: Change sending frequency
              input:
                properties:
                  input:
                    maximum: 100
                    minimum: 3
                    type: number
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay
            reboot:
              title: Reboot
              description: Reboot device
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/reboot
        events:
          type: object
          properties:
            highCPU:
              $ref: "#/components/schemas/EventHighCPUResponse"
          additionalProperties: {}
          example:
            highCPU:
              title: High CPU
              description: The CPU usage is over 50%
              data:
                type: number
                unit: percent
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
              rel:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties
              rel: properties
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions
              rel: actions
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events
              rel: events
        href:
          type: string
          example: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx
        version:
          type: string
          example: ""
    ThingResponse:
      type: object
      properties:
        id:
          type: string
          example: api.dev.altairsc.com/spaces/altair/things/01edb9j75vymj8p7qppm19h8nx
        uid:
          type: string
          example: 01edb9j75vymj8p7qppm19h8nx
        title:
          type: string
          example: SmartWorks Device
        description:
          type: string
          example: My connected SmartWorks device
        space:
          type: string
          example: altair
        collection:
          type: string
          example: ElectronicBoards
        model:
          type: string
          properties:
            name:
              type: string
              example: ""
            version:
              type: number
              example: 0
          additionalProperties: {}
          example: ""
        properties:
          type: object
          properties:
            cpu:
              $ref: "#/components/schemas/PropertyCPUResponse"
            disk:
              $ref: "#/components/schemas/PropertyDiskResponse"
            memory:
              $ref: "#/components/schemas/PropertyMemoryResponse"
          additionalProperties: {}
          example:
            cpu:
              title: CPU %
              description: Device CPU usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/cpu
            disk:
              title: Disk %
              description: Device Disk usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/disk
            memory:
              title: Memory %
              description: Device Memory usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/memory
        actions:
          type: object
          properties:
            delay:
              $ref: "#/components/schemas/ActionDelayResponse"
            reboot:
              $ref: "#/components/schemas/ActionRebootResponse"
          additionalProperties: {}
          example:
            delay:
              title: Delay
              description: Change sending frequency
              input:
                properties:
                  input:
                    maximum: 100
                    minimum: 3
                    type: number
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay
            reboot:
              title: Reboot
              description: Reboot device
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/reboot
        events:
          type: object
          properties:
            highCPU:
              $ref: "#/components/schemas/EventHighCPUResponse"
          additionalProperties: {}
          example:
            highCPU:
              title: High CPU
              description: The CPU usage is over 50%
              data:
                type: number
                unit: percent
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
              rel:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties
              rel: properties
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions
              rel: actions
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events
              rel: events
        href:
          type: string
          example: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx
        version:
          type: string
          example: ""
    ThingUpdateResponse:
      type: object
      properties:
        id:
          type: string
          example: api.dev.altairsc.com/spaces/altair/things/01edb9j75vymj8p7qppm19h8nx
        uid:
          type: string
          example: 01edb9j75vymj8p7qppm19h8nx
        title:
          type: string
          example: SmartWorks Device updated
        description:
          type: string
          example: My connected SmartWorks device updated
        space:
          type: string
          example: altair
        collection:
          type: string
          example: ElectronicBoards
        model:
          type: string
          properties:
            name:
              type: string
              example: ""
            version:
              type: number
              example: 0
          additionalProperties: {}
          example: ""
        properties:
          type: object
          properties:
            cpu:
              $ref: "#/components/schemas/PropertyCPUResponse"
            disk:
              $ref: "#/components/schemas/PropertyDiskResponse"
            memory:
              $ref: "#/components/schemas/PropertyMemoryResponse"
          additionalProperties: {}
          example:
            cpu:
              title: CPU %
              description: Device CPU usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/cpu
            disk:
              title: Disk %
              description: Device Disk usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/disk
            memory:
              title: Memory %
              description: Device Memory usage in percent
              type: number
              unit: percent
              readOnly: false
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/memory
        actions:
          type: object
          properties:
            delay:
              $ref: "#/components/schemas/ActionDelayResponse"
            reboot:
              $ref: "#/components/schemas/ActionRebootResponse"
          additionalProperties: {}
          example:
            delay:
              title: Delay
              description: Change sending frequency
              input:
                properties:
                  input:
                    maximum: 100
                    minimum: 3
                    type: number
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay
            reboot:
              title: Reboot
              description: Reboot device
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/reboot
        events:
          type: object
          properties:
            highCPU:
              $ref: "#/components/schemas/EventHighCPUResponse"
          additionalProperties: {}
          example:
            highCPU:
              title: High CPU
              description: The CPU usage is over 50%
              data:
                type: number
                unit: percent
              links:
                - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
              rel:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties
              rel: properties
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions
              rel: actions
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events
              rel: events
        href:
          type: string
          example: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx
        version:
          type: string
          example: ""
    ThingListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ThingResponse"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    Secret:
      title: Secret
      type: object
      required:
        - secret
      properties:
        client_secret:
          type: string
          example: nuS7y1iQ2MmXVoBS8ivZIB6IFoNLGtgz
      example:
        client_secret: nuS7y1iQ2MmXVoBS8ivZIB6IFoNLGtgz
    Properties:
      type: object
      properties:
        cpu:
          type: number
          example: 22
        disk:
          type: number
          example: 18
        memory:
          type: number
          example: 67
      additionalProperties: {}
      example:
        cpu: 22
        disk: 18
        memory: 67
    Property:
      type: object
      properties:
        memory:
          type: number
          example: 67
      additionalProperties: {}
      example:
        memory: 67
    ActionRequest:
      type: object
      properties:
        delay:
          type: object
          properties:
            input:
              type: object
              properties:
                delay:
                  type: integer
                  example: 5
      additionalProperties: {}
      example:
        delay:
          input:
            delay: 5
    ActionResponse:
      type: object
      properties: {}
      additionalProperties: {}
      example:
        delay:
          input:
            delay: 5
          status: pending
          timeRequested: 2020-04-02 15:37:46+0000
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
    ActionDelayListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActionResponseElement1"
          example:
            - delay:
                input:
                  delay: 5
                status: pending
                timeRequested: 2020-04-02 15:37:46+0000
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
            - delay:
                input:
                  delay: 7
                status: pending
                timeRequested: 2020-04-02 15:39:54+0000
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    ActionListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActionResponseElement1"
          example:
            - delay:
                input:
                  delay: 5
                status: pending
                timeRequested: 2020-04-02 15:37:46+0000
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
            - delay:
                input:
                  delay: 7
                status: pending
                timeRequested: 2020-04-02 15:39:54+0000
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E
            - reboot:
                status: pending
                timeRequested: 2020-04-02 15:56:12+0000
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCCZYATJW1Z3D4T4BA4S2QH
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    ActionUpdateRequest:
      type: object
      properties:
        delay:
          type: object
          properties:
            status:
              type: string
              example: completed
      additionalProperties: {}
      example:
        delay:
          status: completed
    ActionUpdateResponse:
      type: object
      properties:
        delay:
          type: object
          properties:
            input:
              type: object
              properties:
                delay:
                  type: integer
                  example: 5
            status:
              type: string
              example: completed
            timeRequested:
              type: string
              format: date-time
              example: 2020-04-02 15:37:46+0000
            timeCompleted:
              type: string
              format: date-time
              example: 2020-04-02 15:39:25+0000
            href:
              type: string
              example: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
      additionalProperties: {}
      example:
        delay:
          input:
            delay: 5
          status: completed
          timeRequested: 2020-04-02 15:37:46+0000
          timeCompleted: 2020-04-02 15:39:25+0000
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
    EventRequest:
      type: object
      properties:
        highCPU:
          type: object
          properties:
            data:
              type: number
              example: 61
      additionalProperties: {}
      example:
        highCPU:
          data: 61
    EventResponse:
      type: object
      properties:
        highCPU:
          type: object
          properties:
            data:
              type: number
              example: 61
            href:
              type: string
              example: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
            timestamp:
              type: string
              format: date-time
              example: 2020-04-02 15:22:37+0000
      additionalProperties: {}
      example:
        highCPU:
          data: 61
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
          timestamp: 2020-04-02 15:22:37+0000
    EventListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EventResponse"
          example:
            - highCPU:
                data: 61
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
                timestamp: 2020-04-02 15:22:37+0000
            - highCPU:
                data: 85
                href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU/01EDCGYKV4YQ1CY3QHHSX8J843
                timestamp: 2020-04-02 15:26:42+0000
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    ModelRequest:
      type: object
      properties:
        name:
          type: string
          example: RaspberryPiModel
        description:
          type: string
          example: My Raspberry Pi model
      additionalProperties: {}
      example:
        name: RaspberryPiModel
        description: My Raspberry Pi model
    ModelResponse:
      type: object
      properties:
        name:
          type: string
          example: RaspberryPiModel
        description:
          type: string
          example: My Raspberry Pi model
        collection:
          type: string
          example: ElectronicBoards
      additionalProperties: {}
      example:
        name: RaspberryPiModel
        description: My Raspberry Pi model
        collection: ElectronicBoards
    ModelListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ModelResponse"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    ModelUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: RaspberryPiModel
        description:
          type: string
          example: My Raspberry Pi 4 model
      additionalProperties: {}
      example:
        title: RaspberryPiModel
        description: My Raspberry Pi 4 model
    ModelUpdateResponse:
      type: object
      properties:
        name:
          type: string
          example: RaspberryPiModel
        description:
          type: string
          example: My Raspberry Pi 4 model
        collection:
          type: string
          example: ElectronicBoards
        title:
          type: string
          example: RaspberryPiModel
      additionalProperties: {}
      example:
        name: RaspberryPiModel
        description: My Raspberry Pi 4 model
        collection: ElectronicBoards
    ModelVersionRequest:
      type: object
      properties:
        template:
          properties:
            title:
              type: string
              example: SmartWorks Device
            description:
              type: string
              example: My connected SmartWorks device
            properties:
              type: object
              properties: {}
              additionalProperties: {}
              example:
                cpu:
                  title: CPU %
                  description: Device CPU usage in percent
                  type: number
                  unit: percent
                  readOnly: false
                disk:
                  title: Disk %
                  description: Device Disk usage in percent
                  type: number
                  unit: percent
                  readOnly: false
                memory:
                  title: Memory %
                  description: Device Memory usage in percent
                  type: number
                  unit: percent
                  readOnly: false
            actions:
              type: object
              properties: {}
              additionalProperties: {}
              example: {}
            events:
              type: object
              properties: {}
              additionalProperties: {}
              example: {}
        title:
          type: string
          example: SmartWorks Device
        description:
          type: string
          example: My connected SmartWorks device
        properties:
          type: object
          properties:
            cpu:
              $ref: "#/components/schemas/PropertyCPU"
            disk:
              $ref: "#/components/schemas/PropertyDisk"
            memory:
              $ref: "#/components/schemas/PropertyMemory"
        actions:
          type: object
          properties: {}
        events:
          type: object
          properties: {}
    ModelVersionResponse:
      allOf:
        - type: object
          properties:
            version:
              type: number
              example: 1
        - $ref: "#/components/schemas/ModelVersionRequest"
      properties:
        version:
          type: number
          example: 1
        template:
          $ref: "#/components/schemas/ModelVersionRequest"
    ModelVersionListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ModelVersionResponse"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    ThingStatusResponse:
      type: object
      properties:
        uid:
          type: string
          example: 01edb9j75vymj8p7qppm19h8nx
        title:
          type: string
          example: SmartWorks Device
        space:
          type: string
          example: altair
        collection:
          type: string
          example: ElectronicBoards
        properties:
          $ref: "#/components/schemas/Properties"
      additionalProperties: {}
      example:
        uid: 01edb9j75vymj8p7qppm19h8nx
        title: SmartWorks Device
        space: altair
        collection: ElectronicBoards
        properties:
          cpu: 22
          disk: 18
          memory: 67
    ThingStatusListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ThingStatusResponse"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    ThingDeleteResponse:
      title: Response - Delete Cluster
      properties:
        error_cluster_backend:
          type: object
          properties:
            http_status_code:
              type: integer
              example: 204
    PropertyCPU:
      properties:
        title:
          type: string
          example: CPU %
        description:
          type: string
          example: Device CPU usage in percent
        type:
          type: string
          example: number
        unit:
          type: string
          example: percent
        readOnly:
          type: boolean
          example: false
    PropertyCPUResponse:
      properties:
        title:
          type: string
          example: CPU %
        description:
          type: string
          example: Device CPU usage in percent
        type:
          type: string
          example: number
        unit:
          type: string
          example: percent
        readOnly:
          type: boolean
          example: false
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/cpu
    PropertyDisk:
      properties:
        title:
          type: string
          example: Disk %
        description:
          type: string
          example: Device Disk usage in percent
        type:
          type: string
          example: number
        unit:
          type: string
          example: percent
        readOnly:
          type: boolean
          example: false
    PropertyDiskResponse:
      properties:
        title:
          type: string
          example: Disk %
        description:
          type: string
          example: Device Disk usage in percent
        type:
          type: string
          example: number
        unit:
          type: string
          example: percent
        readOnly:
          type: boolean
          example: false
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/disk
    PropertyMemory:
      properties:
        title:
          type: string
          example: Memory %
        description:
          type: string
          example: Device Memory usage in percent
        type:
          type: string
          example: number
        unit:
          type: string
          example: percent
        readOnly:
          type: boolean
          example: false
    PropertyMemoryResponse:
      properties:
        title:
          type: string
          example: Memory %
        description:
          type: string
          example: Device Memory usage in percent
        type:
          type: string
          example: number
        unit:
          type: string
          example: percent
        readOnly:
          type: boolean
          example: false
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/properties/memory
    ActionDelay:
      properties:
        title:
          type: string
          example: Delay
        description:
          type: string
          example: Change sending frequency
        input:
          type: object
          properties:
            properties:
              type: object
              properties:
                input:
                  type: object
                  properties:
                    maximum:
                      type: number
                      example: 100
                    minimum:
                      type: number
                      example: 3
                    type:
                      type: string
                      example: number
    ActionDelayResponse:
      properties:
        title:
          type: string
          example: Delay
        description:
          type: string
          example: Change sending frequency
        input:
          type: object
          properties:
            properties:
              type: object
              properties:
                input:
                  type: object
                  properties:
                    maximum:
                      type: number
                      example: 100
                    minimum:
                      type: number
                      example: 3
                    type:
                      type: string
                      example: number
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay
    ActionReboot:
      properties:
        title:
          type: string
          example: Reboot
        description:
          type: string
          example: Reboot device
    ActionRebootResponse:
      properties:
        title:
          type: string
          example: Reboot
        description:
          type: string
          example: Reboot device
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/reboot
    EventHighCPU:
      properties:
        title:
          type: string
          example: High CPU
        description:
          type: string
          example: The CPU usage is over 50%
        data:
          type: object
          properties:
            type:
              type: string
              example: number
            unit:
              type: string
              example: percent
    EventHighCPUResponse:
      properties:
        title:
          type: string
          example: High CPU
        description:
          type: string
          example: The CPU usage is over 50%
        data:
          type: object
          properties:
            type:
              type: string
              example: number
            unit:
              type: string
              example: percent
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
          example:
            - href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU
    ErrorResponse:
      title: Error Response
      type: object
      properties:
        error:
          type: object
          properties:
            status:
              type: integer
              format: int64
              example: 400
            message:
              type: string
              example: invalid id
            details:
              type: object
              description: Additional details about the error.
    ActionResponseElement1:
      properties:
        delay:
          type: object
          properties:
            input:
              type: object
              properties:
                delay:
                  type: integer
                  example: 5
            status:
              type: string
              example: pending
            timeRequested:
              type: string
              format: date-time
              example: 2020-04-02 15:37:46+0000
            href:
              type: string
              example: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
    ActionDeleteResponse:
      title: Response - Delete Cluster
      properties:
        error_cluster_backend:
          type: object
          properties:
            http_status_code:
              type: integer
              example: 204
    EventHighCPUListResponse:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EventResponse"
        paging:
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    FunctionStatusEnum:
      type: string
      enum:
        - Pending
        - Building
        - Running
        - Failed
      example: Building
    FunctionMetrics:
      title: FunctionMetrics
      type: object
      description: Function metrics. Only present in responses.
      properties:
        invocations:
          type: integer
          example: 123
        replicas:
          type: integer
          example: 1
        available_replicas:
          type: integer
          example: 3
      example:
        invocations: 123
        replicas: 1
        available_replicas: 3
    SourceCode:
      title: SourceCode
      type: object
      description: Function source code information.
      properties:
        code:
          type: string
          description: Function's code encoded in Base64.
          example: ZGVmIGhhbmRsZShyZXEpOgogICAgcmV0dXJuIHsKICAgICAgICAic3RhdHVzQ29kZSI6IDIwMSwKICAgICAgICAiYm9keSI6IHJlcS5ib2R5LmRlY29kZSgidXRmLTgiKQogICAgfQo=
    FunctionOptions:
      title: FunctionOptions
      type: object
      properties:
        topics:
          type: string
          description: Comma-separated list of topics (see Triggers).
          example: living-room/motion,floor1/bathroom/light
        schedule:
          type: string
          description: Cron format string to schedule function invocations (see cron
            trigger).
          example: "*/5 * * * *"
      example:
        topics: living-room/motion,floor1/bathroom/light
        schedule: "*/5 * * * *"
    Function:
      title: Function
      type: object
      properties:
        id:
          type: string
          example: 01E95N08FCES3HASVT4KC3WZ21
        space:
          type: string
          example: myspace
        name:
          type: string
          description: Function name. Must be unique and can only contain lowercase
            letters, numbers and hyphens.
          example: motion-detected
        description:
          type: string
          example: This function will be invoked when motion is detected.
        template:
          type: string
          example: python3-http
        env:
          type: object
          description: Environment variables used by the function. All values must be
            strings.
          example:
            MIN_DETECTION_EVENTS: "2"
            RESET_AFTER_SECONDS: "15"
        options:
          $ref: "#/components/schemas/FunctionOptions"
        source:
          $ref: "#/components/schemas/SourceCode"
        status:
          $ref: "#/components/schemas/FunctionStatusEnum"
        metrics:
          $ref: "#/components/schemas/FunctionMetrics"
        created_at:
          type: string
          example: 2020-08-11T15:29:51
        updated_at:
          type: string
          example: 2020-08-11T15:29:51
      example:
        id: 01EPEF6NB562TTT0C3XQ8VTXVG
        space: myspace
        name: motion-detected
        description: This function will be invoked when motion is detected.
        template: python3-http
        env:
          MIN_DETECTION_EVENTS: "2"
          RESET_AFTER_SECONDS: "15"
        options:
          topics: living-room/motion,floor1/bathroom/light
          schedule: "*/5 * * * *"
        status: Running
        metrics:
          invocations: 123
          replicas: 1
          available_replicas: 3
        created_at: 2020-11-06T11:04:51
        updated_at: 2020-11-06T11:04:51
    Functions:
      title: Functions
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Function"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
            previous_cursor:
              type: string
      example:
        data:
          - id: 01EPEF6NB562TTT0C3XQ8VTXVG
            space: myspace
            name: motion-detected
            description: This function will be invoked when motion is detected.
            template: python3-http
            env:
              MIN_DETECTION_EVENTS: "2"
              RESET_AFTER_SECONDS: "15"
            options:
              topics: living-room/motion,floor1/bathroom/light
              schedule: "*/5 * * * *"
            status: Running
            metrics:
              invocations: 123
              replicas: 1
              available_replicas: 3
            created_at: 2020-11-06T11:04:51
            updated_at: 2020-11-06T11:04:51
          - id: 01E95N08FCES3HASVT4KC3WZ31
            space: myspace
            name: alarm-armed
            description: This function will be invoked when the alarm is armed.
            template: go
            env:
              MQTT_BROKER: broker.hivemq.com
              MQTT_USER: my_user
              MQTT_PASSWORD: my_password
            status: Running
            metrics:
              invocations: 123
              replicas: 1
              available_replicas: 3
            created_at: 2020-11-06T08:04:51
            updated_at: 2020-11-06T10:18:37
        paging:
          next_cursor: ""
          previous_cursor: ""
    LogEntry:
      type: object
      properties:
        name:
          type: string
          description: the function name
        instance:
          type: string
          description: the name/id of the specific function instance
        timestamp:
          type: string
          description: the timestamp of when the log message was recorded
          format: date-time
        text:
          type: string
          description: raw log message content
    LogEntryList:
      type: array
      items:
        $ref: "#/components/schemas/LogEntry"
      example:
        - name: my-function
          instance: my-function-685d8b8d68-qd94p
          timestamp: 2020-11-10T08:41:41.899987829Z
          text: Hello World!
        - name: my-function
          instance: my-function-685d8b8d68-qd94p
          timestamp: 2020-11-10T08:41:57.345145845Z
          text: Hello again!
    TriggerStatusEnum:
      type: string
      enum:
        - Pending
        - Running
        - Failed
      example: Running
    TriggerTypeEnum:
      type: string
      enum:
        - cron
        - mqtt
        - rabbitmq
      example: mqtt
    TriggerMqttConfig:
      title: TriggerMqttConfig
      type: object
      properties:
        host:
          type: string
          description: Host of the MQTT broker. Do not set any scheme.
          example: mqtt-broker.com:1883
        port:
          type: integer
          description: Port of the MQTT broker. If not set, defaults to 1883.
          example: 1883
        topics:
          type: string
          example: room1/temperature,room2/humidity
        username:
          type: string
          description: MQTT broker username.
          example: admin
        password:
          type: string
          description: MQTT broker password.
          example: secret
        qos:
          type: integer
          example: 1
      example:
        host: mqtt-broker.com
        port: 1883
        topics: room1/temperature,room2/humidity
        username: admin
        password: secret
        qos: 1
    TriggerRabbitMQConfig:
      title: TriggerRabbitMQConfig
      type: object
      properties:
        host:
          type: string
          example: https://rabbitmq-broker.com
        port:
          type: integer
          example: 5672
        username:
          type: string
          description: RabbitMQ username.
          example: guest
        password:
          type: string
          description: RabbitMQ password.
          example: guest
        exchange:
          type: string
          example: my-exchange
        queue:
          type: string
          example: my-queue
        topics:
          type: string
          description: Comma-separated routing keys of the messages this trigger will
            listen to.
          example: room1.temperature,room2.humidity
      example:
        host: https://rabbitmq-broker.com
        port: 5672
        username: guest
        password: guest
        exchange: my-exchange
        queue: my-queue
        topics: room1.temperature,room2.humidity
    Trigger:
      title: Trigger
      type: object
      properties:
        id:
          type: string
          example: 01ESGG55SK6861Y9B6HFVBQK54
        description:
          type: string
          example: This trigger will subscribe to "https://mqtt-broker.com" broker.
        type:
          $ref: "#/components/schemas/TriggerTypeEnum"
        config:
          oneOf:
            - $ref: "#/components/schemas/TriggerMqttConfig"
            - $ref: "#/components/schemas/TriggerRabbitMQConfig"
        status:
          $ref: "#/components/schemas/TriggerStatusEnum"
        error_message:
          type: string
          description: If the Trigger failed (status = `Failed`), this attribute will
            contain the error message.
          example: Not Authorized
        callback_url:
          type: string
          description: Optional callback URL to send the function response to.
          example: secret
      example:
        id: 01ESGG55SK6861Y9B6HFVBQK54
        description: This trigger will subscribe to "https://mqtt-broker.com" broker.
        type: mqtt
        config:
          host: mqtt-broker.com
          port: 1883
          topics: room1/temperature,room2/humidity
          username: admin
          password: secret
          qos: 1
        status: Pending
        callback_url: https://my-website.com/trigger-callback
    Triggers:
      title: Triggers
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Trigger"
        paging:
          type: object
          properties:
            next_cursor:
              type: string
            previous_cursor:
              type: string
      example:
        data:
          - id: 01ESGG55SK6861Y9B6HFVBQK54
            description: This trigger will subscribe to "https://mqtt-broker.com" MQTT
              broker.
            type: mqtt
            config:
              host: mqtt-broker.com
              port: 1883
              topics: room1/temperature,room2/humidity
              username: admin
              password: secret
              qos: 1
            status: Pending
            callback_url: https://my-website.com/trigger-callback
          - id: 01ESJRYAH2XZ9SHZS0H5ZJX1DM
            description: This trigger will consume messages from
              "https://rabbitmq-broker.com".
            type: rabbitmq
            config:
              host: https://rabbitmq-broker.com
              port: 5672
              username: guest
              password: guest
              exchange: my-exchange
              queue: my-queue
              topics: room1.temperature,room2.humidity
            status: Failed
            error_message: Not Authorized
          - id: 01ESJSCJMW01FJ4DC90Q9Y058Z
            description: This trigger will invoke functions based in its cron schedule.
            type: cron
            status: Running
        paging:
          next_cursor: ""
          previous_cursor: ""
    InfoResponse:
      title: InfoResponse
      type: object
      properties:
        details:
          type: string
          example: function not ready
      example:
        details: function not ready
    createLabel:
      title: Create Label Request
      type: object
      properties:
        label_name:
          type: string
          example: my-label
        label_description:
          type: string
          example: this is a label description
        color:
          type: string
          example: "#ffffff"
    createLabelResponse:
      properties:
        id:
          type: string
          format: ulid
          example: 01EDVJEMFD24360JT7434A6GS8
        space:
          type: string
          example: altair
        color:
          type: string
          example: "#ffffff"
        label_description:
          type: string
          example: this is a label description
        label_name:
          type: string
          example: my-label
        mqtt:
          type: boolean
          example: false
    LabelListResponse:
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/LabelListElement1"
        paging:
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    LabelListElement1:
      properties:
        id:
          type: string
          example: 01EDVJEMFD24360JT7434A6GS8
        space:
          type: string
          example: altair
        color:
          type: string
          example: "#ffffff"
        label_name:
          type: string
          example: my-label
        label_description:
          type: string
          example: this is a label description
        mqtt:
          type: boolean
          example: true
    LabelDeleteResponse:
      title: Response - Delete Label
      properties:
        error_label_backend:
          type: object
          properties:
            http_status_code:
              type: integer
              example: 204
    LabelListElementRelations:
      title: Response - List Relations
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/LabelRelationElement1"
        paging:
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    createLabelRelation:
      title: Create Label Request
      type: object
      properties:
        entity_type:
          type: string
          example: thing
        entity_id:
          type: string
          example: 01EDVJEMFD24360JT7434A6GS8
    LabelRelationElement1:
      properties:
        collection_name:
          type: string
          example: my-collection
        entity_id:
          type: string
          example: 6HRQCEA5F2BL97KUNNKT1230R8
        entity_name:
          type: string
          example: my-thing
        entity_type:
          type: string
          example: thing
        label_id:
          type: string
          example: 01EDVJEMFD24360JT7434A6GS8
        space:
          type: string
          example: altair
    LabeledListResponse:
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/LabeledListItem1"
              - $ref: "#/components/schemas/LabeledListItem1"
        paging:
          properties:
            next_cursor:
              type: string
              example: ""
            previous_cursor:
              type: string
              example: ""
    LabeledListItem1:
      properties:
        entity_id:
          type: string
          example: 6HRQCEA5F2BL97KUNNKT1230R8
        labels:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/LabelListElement1"
              - $ref: "#/components/schemas/LabelListElement1"
    TokenRequest:
      description: Token Body
      title: Token Request
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
        - code
        - code_verifier
        - refresh_token
        - redirect_uri
        - scope
      properties:
        grant_type:
          type: string
          description: >
            Grants Types according to Flows:

            - For **Authorization Code** and **PKCE** is required `authorization_code`.<br/>

            - For **Client Credentials** is required `client_credentials`.<br/>

            - For **Refresh Grant** is required `refresh_token`.
          enum:
            - authorization_code
            - client_credentials
            - refresh_token
        client_id:
          type: string
          description: >
            Need for **Authorization Code**, **PKCE** and **Client
            Credentials**!!<br/>

            Every client (**Website (MVC)**, **Website (SPA)**, **Mobile App**, **Client (Service)**...) is identified by a client ID.<br/>

            Unlike a client secret, the client ID is a public value that does not have to be protected.
        client_secret:
          type: string
          description: >
            Need for **Client Credentials**!!<br/>

            The `client_secret` is a secret known only to the application and the authorization server.

            It must be sufficiently random to not be guessable.
        code:
          type: string
          description: >
            Need for **Authorization Code** and **PKCE**!!<br/>

            It is the authorization code generated by the authorization server with **"Authorization Code"** & **"PKCE"** flows.<br/>

            This code is relatively short-lived depending on the OAuth service config.
        code_verifier:
          type: string
          description: >
            Need for **Authorization Code** and **PKCE**!!<br/>

            `code_verifier` = ***high-entropy cryptographic random STRING using the
                                unreserved characters [A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~", with a minimum length
                                of 43 characters and a maximum length of 128 characters.***
        refresh_token:
          type: string
          description: >
            Need for **Refresh Grant**!!<br/>

            The presence of the refresh token means that the access token will expire and you’ll be able to get a new one

            without the user’s interaction.<br/> To use the refresh token, make a POST request to the service’s token

            endpoint with `grant_type=refresh_token`, and include the refresh token as well as the client credentials.
        redirect_uri:
          type: string
          description: >
            Need for **Authorization Code** and **PKCE**!!<br/>

            Tells the authorization server where to send the user back to after they approve the request.

            ***If the client does not have it enabled, an error is returned.***
        scope:
          type: string
          description: >
            Need for **Authorization Code**, **PKCE** and **Client
            Credentials**!!<br/>

            Scope is a way to limit an app’s access to a user’s data. Rather than granting complete access to a user’s account,

            it is often useful to give apps a way to request a more limited scope of what they are allowed to do on behalf of a user.<br/>

            Additionally, we have pre-defined OAuth 2.0 Scope values:

            - `offline_access`: Include this scope if you wish to receive a refresh token.

            - `offline`: alias for `offline_access`.

            - `openid`: Include this scope if you wish to perform an OpenID Connect request.
      example:
        grant_type: client_credentials
        client_id: my-client-id
        client_secret: my-client-secret
        code: vGwDK4N168Z6UrHmypDE9STaBRC5Sq1vWaRwkEInt2o.fGeErUUhkflixRBGUU1hSFR91GHqrmG5eCagfnqAoD8
        code_verifier: 92bGgipEveY72NCHxt6CzOv5pDJd3sOknhixr9Q5UjoiHl5p7iKhw7wVqOPkmC3QPoaAp88kbTfmBVmPN8srWFgrgfgrZacaoNz2pOd5AsjbDwknzigjrU28Rxy3FK49
        refresh_token: ALRL46Rb2YLVarjk8J7ywBqSAypkPt-hPzl3Cue1WbY.6frbcFJKuhd1ixtjLR5AUv0BPGsKSfkS1HB1TLG22u4
        redirect_uri: https://oauthdebugger.com/debug
        scope: openid offline
    TokenResponse:
      description: Token Response
      title: Token Response
      type: object
      required:
        - access_token
        - expires_in
        - scope
        - token_type
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        id_token:
          type: string
        refresh_token:
          type: string
        scope:
          type: string
        token_type:
          type: string
      example:
        access_token: oym1Jz02c3KoC5HpVTDZArCuF8CS5FsIjDzcaZYqRY4.JcMHgPo-cIZei-2biVt3SsyHiiiYT17PqSDi_833N8I
        expires_in: 604799
        id_token: eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzo2NDYwNjA3Mi05MTY1LTRiZTYtYmQ3Yi04ZDMyMmU2ZWQ3ZjciLCJ0eXAiOiJKV1QifQ.eyJhdF9oYXNoIjoiR1lPRDJDaFFiMFBpc0pLWW5qbDR5QSIsImF1ZCI6WyJhbHRhaXI6OnN0dWRpbyJdLCJhdXRoX3RpbWUiOjE1OTI1NjE0ODcsImVtYWlsIjoiYWx0YWlyQHNtYXJ0d29ya3MuY29tIiwiZXhwIjoxNTkyNTY1MDg5LCJpYXQiOjE1OTI1NjE0ODksImlzcyI6Imh0dHBzOi8vYXBpLmRldi5hbHRhaXJzYy5jb20vIiwianRpIjoiMWZmOTQ2MWEtYmM4Mi00MjUzLWE3NzgtYmMwNmY0Y2Q0OTM4IiwibGFzdF9uYW1lIjoiU21hcnRXb3JrcyIsIm5hbWUiOiJBbHRhaXIiLCJub25jZSI6Ijlla211NXpkdTYiLCJyYXQiOjE1OTI1NjE0NzUsInNpZCI6IjI1ZGIzMzdhLTQxNjktNGJlNC05MWZmLTc2OWNmNWZkNmY0YyIsInN1YiI6ImFsdGFpciIsInVzZXJuYW1lIjoiYWx0YWlyIn0.lDt8jfAkCC9g9Bt5iSz2rgCgC9JNXj-yZ-rs9l-_67eVxnKHu_hkb3vmQmk-k6jwx5pRjQ4_lqPQe-3GMS3C5Fl6DgxHDtDlzMnRUGKKRjTfUJy80Y0__mquYEhDGP9oxsLy39vHLpJVFj6Sx81owoixTW5ce1iGTJ2D3XcNjLooyg9Axa_mrSWBsZJoD-jaZZ7TTliz-jn1QBQbX3V-KCE2qFvcgAAJ8ppu9vEBiCDd95xoNgpF_6EEdYV3oPJgurNfagP4GEFNXSA9BlHNXb8PgFR32I_h_4oz4j3Lq8UW-V1FuldpytXSeJ1Lbh63g5vmbSdDgyuZz-uGHCDXRpcEQqj3fIdaey3TErhFI_G-RbA3xL6uRkMtMxK22e5oyUSbnd8RDhfwZB4E3q7KlDhQnpuZLat-OQ81NTLtC1ggNJgfzm3wlCIEfAeUbOae1hS2vXYJFWyQ8dl-_Kik7QAOSFPYhl3ipr58w13wmf9C9TVdlfZ-FxvTrTbMqjOibMGO4qlnuoo8CXLWIuWThRQgKTnK5CHpuDKBuH_tnL059k7weZwa4Vgk7wlrHPLPZVmg-b287zGx2OGZiS6VlYfoiIhQ_mY4fB1o2QEc4lPsgpe6JlTSCQ47VoEUvFzK83iI5pOhEKGFOSsSkAOSBvWjnOHrc9CvwYIZ7IkJIHQ
        refresh_token: ALRL46Rb2YLVarjk8J7ywBqSAypkPt-hPzl3Cue1WbY.6frbcFJKuhd1ixtjLR5AUv0BPGsKSfkS1HB1TLG22u4
        scope: openid offline
        token_type: bearer
    RevokeRequest:
      description: Revoke Body
      title: Revoke Request
      type: object
      required:
        - token
        - client_id
        - client_secret
      properties:
        token:
          type: string
          description: |
            Token to revoke and invalidate.
        client_id:
          type: string
          description: |
            Identifier of the client that generated the token to revoke.
        client_secret:
          type: string
          description: |
            Secret of the client that generated the token to revoke.
      example:
        token: ALRL46Rb2YLVarjk8J7ywBqSAypkPt-hPzl3Cue1WbY.6frbcFJKuhd1ixtjLR5AUv0BPGsKSfkS1HB1TLG22u4
        client_id: my-client
        client_secret: my-strong-secret
    BadFormedError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Payload bad formed
            status:
              type: integer
              example: 400
    CredentialsError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Credentials get error
            status:
              type: integer
              example: 400
    RelationError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Relation get error
            status:
              type: integer
              example: 400
    ListCredentialsResponse:
      properties:
        collection:
          type: array
          items:
            $ref: "#/components/schemas/CredentialsStudio"
    CredentialsStudio:
      title: Studio MQTT info
      properties:
        id:
          type: string
          format: ulid
          example: 01EDRHJB4Y4ZB7C0VAABT8RQQS
        username:
          type: string
          example: studio@altair
        description:
          type: string
          example: Automatic Register Credentials Account Studio
        enabled:
          type: boolean
          example: true
        type:
          type: string
          example: studio
        expired_at:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: 2020-06-26T06:45:04Z
        topics:
          type: array
          items:
            $ref: "#/components/schemas/MQTTAccountPattern1"
    CredentialsThing:
      title: Thing MQTT info
      properties:
        id:
          type: string
          format: ulid
          example: 01EDRMFZXHPEBGGHZBYVV1W0Y9
        username:
          type: string
          example: UTB7@altair
        description:
          type: string
          example: Automatic Register Credentials Things
        enabled:
          type: boolean
          example: true
        type:
          type: string
          example: things
        expired_at:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: 2020-06-26T06:45:04Z
        topics:
          type: array
          items:
            $ref: "#/components/schemas/MQTTAccountProperties"
    ShowCredentialsThingResponse:
      properties:
        collection:
          type: array
          items:
            $ref: "#/components/schemas/CredentialsThing"
    UpdateMQTTCredentialsResponse:
      title: Thing MQTT info after update
      properties:
        id:
          type: string
          format: ulid
          example: 01EDRMFZXHPEBGGHZBYVV1W0Y9
        username:
          type: string
          example: newUsername@altair
        password:
          type: string
          example: newPassword
        description:
          type: string
          example: My personal description
        enabled:
          type: boolean
          example: true
        type:
          type: string
          example: things
        expired_at:
          type: integer
          example: 1626189483
        created_at:
          type: string
          format: date-time
          example: 2020-06-26T06:45:04Z
        topics:
          type: array
          items:
            $ref: "#/components/schemas/MQTTAccountProperties"
    UpdateMQTTCredentials:
      properties:
        username:
          type: string
          example: newUsername
        password:
          type: string
          example: newPassword
        enabled:
          type: boolean
          example: true
        expired_at:
          type: integer
          example: 1626189483
        description:
          type: string
          example: My personal description
    CreateMQTTLabelCredentials:
      properties:
        label:
          type: string
          format: ulid
          example: 01EDRHEF2Y4ZB7C0EGTAT8RQQS
        username:
          type: string
          example: myusername
        password:
          type: string
          example: mypassword
    CreateMQTTLabelCredentialsResponse:
      properties:
        id:
          type: string
          format: ulid
          example: 01EZ4G3JHGH3K7AG1W57GJN0Y9
        description:
          type: string
          example: Label Credential
        type:
          type: string
          example: label
        username:
          type: string
          example: myusername@altair
        password:
          type: string
          example: mypassword
        enabled:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: 2021-02-22T06:45:04Z
        expired_at:
          type: integer
          example: 0
        topics:
          type: array
          items:
            $ref: "#/components/schemas/MQTTLabel"
    ShowMQTTLabelResponse:
      properties:
        id:
          type: string
          format: ulid
          example: 01EZ4G3JHGH3K7AG1W57GJN0Y9
        description:
          type: string
          example: Label Credential
        type:
          type: string
          example: label
        username:
          type: string
          example: myusername@altair
        enabled:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: 2021-02-22T06:45:04Z
        expired_at:
          type: integer
          example: 0
        topics:
          type: array
          items:
            $ref: "#/components/schemas/MQTTLabel"
    UpdateMQTTPassword:
      properties:
        password:
          type: string
          example: newPassword
    UpdateMQTTLabelCredentials:
      properties:
        username:
          type: string
          example: myusername
        password:
          type: string
          example: mypassword
        enabled:
          type: boolean
          example: true
    MQTTAccountPattern1:
      properties:
        pattern_pub:
          type: string
          example: ""
        pattern_sub:
          type: string
          example: altair/#
    MQTTAccountPattern2:
      properties:
        pattern_pub:
          type: string
          example: ""
        pattern_sub:
          type: string
          example: set/altair/#
    MQTTAccountPattern3:
      properties:
        pattern_pub:
          type: string
          example: ""
        pattern_sub:
          type: string
          example: status/altair/#
    MQTTAccountProperties:
      properties:
        pattern_pub:
          type: string
          example: set/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/properties/#
        pattern_sub:
          type: string
          example: status/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/properties/#
    MQTTAccountActions:
      properties:
        pattern_pub:
          type: string
          example: set/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/actions/#
        pattern_sub:
          type: string
          example: status/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/actions/#
    MQTTAccountEvents:
      properties:
        pattern_pub:
          type: string
          example: set/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/events/#
        pattern_sub:
          type: string
          example: status/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/events/#
    MQTTAccountData:
      properties:
        pattern_pub:
          type: string
          example: set/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/data
        pattern_sub:
          type: string
          example: set/altair/collections/mycollection/things/01ed9jencjshpv374k15k1w2gr/data
    MQTTLabel:
      properties:
        pattern_pub:
          type: string
          example: ""
        pattern_sub:
          type: string
          example: status/altair/label/01EDRHEF2Y4ZB7C0EGTAT8RQQS/#
  responses:
    AlreadyExists:
      description: Already Exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseError"
          example:
            error:
              code: 400
              message: Collection already exists
              status: Already Exists
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseError"
          example:
            error:
              code: 403
              message: Access credentials are not sufficient to access this resource
              status: Forbidden
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseError"
          example:
            error:
              code: 404
              message: Requested url does not match any rules
              status: Not Found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthZError"
    Unexpected:
      description: Unexpected error
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/AnyValue"
    BadFormedError:
      description: Payload format error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadFormedError"
    CredentialsError:
      description: Credentials error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CredentialsError"
    RelationError:
      description: Relation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RelationError"
  examples:
    ActionResponseElement1:
      value:
        delay:
          input:
            delay: 5
          status: pending
          timeRequested: 2020-04-02 15:37:46+0000
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
    ActionResponseElement2:
      value:
        delay:
          input:
            delay: 7
          status: pending
          timeRequested: 2020-04-02 15:39:54+0000
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E
    ActionResponseElement3:
      value:
        reboot:
          status: pending
          timeRequested: 2020-04-02 15:56:12+0000
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/actions/delay/01EDCCZYATJW1Z3D4T4BA4S2QH
    EventResponse1:
      value:
        highCPU:
          data: 61
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
          timestamp: 2020-04-02 15:22:37+0000
    EventResponse2:
      value:
        highCPU:
          data: 85
          href: /spaces/altair/things/01edb9j75vymj8p7qppm19h8nx/events/highCPU/01EDCGYKV4YQ1CY3QHHSX8J843
          timestamp: 2020-04-02 15:26:42+0000
