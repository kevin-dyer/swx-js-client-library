/**
 * SmartWorks SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthZError from '../model/AuthZError';
import BadFormedError from '../model/BadFormedError';
import BaseError from '../model/BaseError';
import CreateMQTTLabelCredentials from '../model/CreateMQTTLabelCredentials';
import CreateMQTTLabelCredentialsResponse from '../model/CreateMQTTLabelCredentialsResponse';
import CredentialsError from '../model/CredentialsError';
import ShowMQTTLabelResponse from '../model/ShowMQTTLabelResponse';
import UpdateMQTTLabelCredentials from '../model/UpdateMQTTLabelCredentials';

/**
* MQTTLabels service.
* @module api/MQTTLabelsApi
* @version 1.0.0
*/
export default class MQTTLabelsApi {

    /**
    * Constructs a new MQTTLabelsApi. 
    * @alias module:api/MQTTLabelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create MQTT credentials for label
     * Create MQTT credentials for a specific label
     * @param {String} space 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMQTTLabelCredentials} opts.createMQTTLabelCredentials 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateMQTTLabelCredentialsResponse} and HTTP response
     */
    createMQTTLabelCredentialsWithHttpInfo(space, opts) {
      opts = opts || {};
      let postBody = opts['createMQTTLabelCredentials'];
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling createMQTTLabelCredentials");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMQTTLabelCredentialsResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create MQTT credentials for label
     * Create MQTT credentials for a specific label
     * @param {String} space 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMQTTLabelCredentials} opts.createMQTTLabelCredentials 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateMQTTLabelCredentialsResponse}
     */
    createMQTTLabelCredentials(space, opts) {
      return this.createMQTTLabelCredentialsWithHttpInfo(space, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete MQTT label
     * Delete MQTT capabilities for a label
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteMQTTLabelWithHttpInfo(space, labelId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling deleteMQTTLabel");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling deleteMQTTLabel");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/labels/{label-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete MQTT label
     * Delete MQTT capabilities for a label
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteMQTTLabel(space, labelId) {
      return this.deleteMQTTLabelWithHttpInfo(space, labelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show MQTT label details
     * Show MQTT label details for a specific label
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ShowMQTTLabelResponse} and HTTP response
     */
    showMQTTLabelInfoWithHttpInfo(space, labelId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showMQTTLabelInfo");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling showMQTTLabelInfo");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowMQTTLabelResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/labels/{label-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show MQTT label details
     * Show MQTT label details for a specific label
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ShowMQTTLabelResponse}
     */
    showMQTTLabelInfo(space, labelId) {
      return this.showMQTTLabelInfoWithHttpInfo(space, labelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update MQTT Label
     * Update the MQTT Label credentials and / or state
     * @param {String} space 
     * @param {String} labelId 
     * @param {module:model/UpdateMQTTLabelCredentials} updateMQTTLabelCredentials This is the field that you can update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateMQTTLabelCredentialsResponse} and HTTP response
     */
    updateMQTTLabelWithHttpInfo(space, labelId, updateMQTTLabelCredentials) {
      let postBody = updateMQTTLabelCredentials;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateMQTTLabel");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling updateMQTTLabel");
      }
      // verify the required parameter 'updateMQTTLabelCredentials' is set
      if (updateMQTTLabelCredentials === undefined || updateMQTTLabelCredentials === null) {
        throw new Error("Missing the required parameter 'updateMQTTLabelCredentials' when calling updateMQTTLabel");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMQTTLabelCredentialsResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/labels/{label-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update MQTT Label
     * Update the MQTT Label credentials and / or state
     * @param {String} space 
     * @param {String} labelId 
     * @param {module:model/UpdateMQTTLabelCredentials} updateMQTTLabelCredentials This is the field that you can update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateMQTTLabelCredentialsResponse}
     */
    updateMQTTLabel(space, labelId, updateMQTTLabelCredentials) {
      return this.updateMQTTLabelWithHttpInfo(space, labelId, updateMQTTLabelCredentials)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
