/**
 * SmartWorks SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionDelayListResponse from '../model/ActionDelayListResponse';
import ActionDeleteResponse from '../model/ActionDeleteResponse';
import ActionListResponse from '../model/ActionListResponse';
import ActionRequest from '../model/ActionRequest';
import ActionResponseElement1 from '../model/ActionResponseElement1';
import ActionUpdateRequest from '../model/ActionUpdateRequest';
import ActionUpdateResponse from '../model/ActionUpdateResponse';

/**
* Actions service.
* @module api/ActionsApi
* @version 1.0.0
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Request action
     * Request action and add it to the action queue from a thing
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {module:model/ActionRequest} actionRequest Create a new action
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionResponseElement1} and HTTP response
     */
    addActionWithHttpInfo(space, collectionName, thingId, action, actionRequest) {
      let postBody = actionRequest;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling addAction");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling addAction");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling addAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling addAction");
      }
      // verify the required parameter 'actionRequest' is set
      if (actionRequest === undefined || actionRequest === null) {
        throw new Error("Missing the required parameter 'actionRequest' when calling addAction");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId,
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionResponseElement1;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request action
     * Request action and add it to the action queue from a thing
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {module:model/ActionRequest} actionRequest Create a new action
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionResponseElement1}
     */
    addAction(space, collectionName, thingId, action, actionRequest) {
      return this.addActionWithHttpInfo(space, collectionName, thingId, action, actionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Action
     * Deletes an existing action by Id
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {String} actionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionDeleteResponse} and HTTP response
     */
    deleteActionWithHttpInfo(space, collectionName, thingId, action, actionId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling deleteAction");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling deleteAction");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling deleteAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deleteAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling deleteAction");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId,
        'action': action,
        'action-id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionDeleteResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}/{action-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Action
     * Deletes an existing action by Id
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {String} actionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionDeleteResponse}
     */
    deleteAction(space, collectionName, thingId, action, actionId) {
      return this.deleteActionWithHttpInfo(space, collectionName, thingId, action, actionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lists all the action queues for a thing
     * Lists all the queues for the different actions within a thing.
     * @param {String} space 
     * @param {String} collectionName 
     * @param {Number} thingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionListResponse} and HTTP response
     */
    listActionsWithHttpInfo(space, collectionName, thingId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listActions");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling listActions");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling listActions");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionListResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Lists all the action queues for a thing
     * Lists all the queues for the different actions within a thing.
     * @param {String} space 
     * @param {String} collectionName 
     * @param {Number} thingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionListResponse}
     */
    listActions(space, collectionName, thingId) {
      return this.listActionsWithHttpInfo(space, collectionName, thingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the queue of actions from a thing
     * Lists the current queue of a specific action from a Thing
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionDelayListResponse} and HTTP response
     */
    listActionsByNameWithHttpInfo(space, collectionName, thingId, action) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listActionsByName");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling listActionsByName");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling listActionsByName");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling listActionsByName");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId,
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionDelayListResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the queue of actions from a thing
     * Lists the current queue of a specific action from a Thing
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionDelayListResponse}
     */
    listActionsByName(space, collectionName, thingId, action) {
      return this.listActionsByNameWithHttpInfo(space, collectionName, thingId, action)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show action requested
     * Shows a requested action from the action queues of a thing.
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {String} actionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionResponseElement1} and HTTP response
     */
    showActionWithHttpInfo(space, collectionName, thingId, action, actionId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showAction");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling showAction");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling showAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling showAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling showAction");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId,
        'action': action,
        'action-id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionResponseElement1;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}/{action-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show action requested
     * Shows a requested action from the action queues of a thing.
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {String} actionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionResponseElement1}
     */
    showAction(space, collectionName, thingId, action, actionId) {
      return this.showActionWithHttpInfo(space, collectionName, thingId, action, actionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update action inside a queue
     * Update the status of an existing action by Id inside of the action queue from a thing
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {String} actionId 
     * @param {module:model/ActionUpdateRequest} actionUpdateRequest Update an existent thing by Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionUpdateResponse} and HTTP response
     */
    updateActionWithHttpInfo(space, collectionName, thingId, action, actionId, actionUpdateRequest) {
      let postBody = actionUpdateRequest;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateAction");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling updateAction");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling updateAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling updateAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling updateAction");
      }
      // verify the required parameter 'actionUpdateRequest' is set
      if (actionUpdateRequest === undefined || actionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'actionUpdateRequest' when calling updateAction");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId,
        'action': action,
        'action-id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionUpdateResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things/{thing-id}/actions/{action}/{action-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update action inside a queue
     * Update the status of an existing action by Id inside of the action queue from a thing
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @param {String} action 
     * @param {String} actionId 
     * @param {module:model/ActionUpdateRequest} actionUpdateRequest Update an existent thing by Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionUpdateResponse}
     */
    updateAction(space, collectionName, thingId, action, actionId, actionUpdateRequest) {
      return this.updateActionWithHttpInfo(space, collectionName, thingId, action, actionId, actionUpdateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
