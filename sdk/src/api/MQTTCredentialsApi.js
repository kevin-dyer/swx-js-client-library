/**
 * SmartWorks SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthZError from '../model/AuthZError';
import BadFormedError from '../model/BadFormedError';
import BaseError from '../model/BaseError';
import CredentialsError from '../model/CredentialsError';
import ListCredentialsResponse from '../model/ListCredentialsResponse';
import ShowCredentialsThingResponse from '../model/ShowCredentialsThingResponse';
import UpdateMQTTCredentials from '../model/UpdateMQTTCredentials';
import UpdateMQTTCredentialsResponse from '../model/UpdateMQTTCredentialsResponse';

/**
* MQTTCredentials service.
* @module api/MQTTCredentialsApi
* @version 1.0.0
*/
export default class MQTTCredentialsApi {

    /**
    * Constructs a new MQTTCredentialsApi. 
    * @alias module:api/MQTTCredentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List MQTT credentials
     * List of all MQTT credentials for an space
     * @param {String} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCredentialsResponse} and HTTP response
     */
    listMQTTcredentialsWithHttpInfo(space) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listMQTTcredentials");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCredentialsResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List MQTT credentials
     * List of all MQTT credentials for an space
     * @param {String} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCredentialsResponse}
     */
    listMQTTcredentials(space) {
      return this.listMQTTcredentialsWithHttpInfo(space)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show MQTT credentials
     * Show an specific MQTT credentials by id
     * @param {String} space 
     * @param {String} credentialsId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ShowCredentialsThingResponse} and HTTP response
     */
    showMQTTcredentialsWithHttpInfo(space, credentialsId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showMQTTcredentials");
      }
      // verify the required parameter 'credentialsId' is set
      if (credentialsId === undefined || credentialsId === null) {
        throw new Error("Missing the required parameter 'credentialsId' when calling showMQTTcredentials");
      }

      let pathParams = {
        'space': space,
        'credentials-id': credentialsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowCredentialsThingResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/credentials/{credentials-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show MQTT credentials
     * Show an specific MQTT credentials by id
     * @param {String} space 
     * @param {String} credentialsId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ShowCredentialsThingResponse}
     */
    showMQTTcredentials(space, credentialsId) {
      return this.showMQTTcredentialsWithHttpInfo(space, credentialsId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update MQTT credentials
     * Update an existing MQTT credentials. If you send an empty body, a random password will be generated
     * @param {String} space 
     * @param {String} credentialsId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMQTTCredentials} opts.updateMQTTCredentials 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateMQTTCredentialsResponse} and HTTP response
     */
    updateMQTTcredentialsWithHttpInfo(space, credentialsId, opts) {
      opts = opts || {};
      let postBody = opts['updateMQTTCredentials'];
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateMQTTcredentials");
      }
      // verify the required parameter 'credentialsId' is set
      if (credentialsId === undefined || credentialsId === null) {
        throw new Error("Missing the required parameter 'credentialsId' when calling updateMQTTcredentials");
      }

      let pathParams = {
        'space': space,
        'credentials-id': credentialsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMQTTCredentialsResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/credentials/{credentials-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update MQTT credentials
     * Update an existing MQTT credentials. If you send an empty body, a random password will be generated
     * @param {String} space 
     * @param {String} credentialsId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMQTTCredentials} opts.updateMQTTCredentials 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateMQTTCredentialsResponse}
     */
    updateMQTTcredentials(space, credentialsId, opts) {
      return this.updateMQTTcredentialsWithHttpInfo(space, credentialsId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
