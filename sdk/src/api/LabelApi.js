/**
 * Users API reference
 * Users OpenAPI endpoints - OpenAPI 3.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLabel from '../model/CreateLabel';
import CreateLabelRelation from '../model/CreateLabelRelation';
import CreateLabelResponse from '../model/CreateLabelResponse';
import LabelDeleteResponse from '../model/LabelDeleteResponse';
import LabelListElement1 from '../model/LabelListElement1';
import LabelListElementRelations from '../model/LabelListElementRelations';
import LabelListResponse from '../model/LabelListResponse';
import LabelRelationElement1 from '../model/LabelRelationElement1';

/**
* Label service.
* @module api/LabelApi
* @version 1.0.0
*/
export default class LabelApi {

    /**
    * Constructs a new LabelApi. 
    * @alias module:api/LabelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Label relation
     * Delete a Label assignation for an specific entity
     * @param {String} space 
     * @param {String} labelId 
     * @param {String} entityId Removes label assigned to this entity_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelDeleteResponse} and HTTP response
     */
    callDeleteWithHttpInfo(space, labelId, entityId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling callDelete");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling callDelete");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling callDelete");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
        'entity_id': entityId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelDeleteResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/labels/{label-id}/relations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Label relation
     * Delete a Label assignation for an specific entity
     * @param {String} space 
     * @param {String} labelId 
     * @param {String} entityId Removes label assigned to this entity_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelDeleteResponse}
     */
    callDelete(space, labelId, entityId) {
      return this.callDeleteWithHttpInfo(space, labelId, entityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create label
     * Send a new label to the platform
     * @param {String} space 
     * @param {module:model/CreateLabel} createLabel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLabelResponse} and HTTP response
     */
    createLabelWithHttpInfo(space, createLabel) {
      let postBody = createLabel;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling createLabel");
      }
      // verify the required parameter 'createLabel' is set
      if (createLabel === undefined || createLabel === null) {
        throw new Error("Missing the required parameter 'createLabel' when calling createLabel");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateLabelResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create label
     * Send a new label to the platform
     * @param {String} space 
     * @param {module:model/CreateLabel} createLabel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLabelResponse}
     */
    createLabel(space, createLabel) {
      return this.createLabelWithHttpInfo(space, createLabel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create label relation
     * Assign an existing label to an existing entity by id
     * @param {String} space 
     * @param {String} labelId 
     * @param {module:model/CreateLabelRelation} createLabelRelation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelRelationElement1} and HTTP response
     */
    createLabelRelationWithHttpInfo(space, labelId, createLabelRelation) {
      let postBody = createLabelRelation;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling createLabelRelation");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling createLabelRelation");
      }
      // verify the required parameter 'createLabelRelation' is set
      if (createLabelRelation === undefined || createLabelRelation === null) {
        throw new Error("Missing the required parameter 'createLabelRelation' when calling createLabelRelation");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelRelationElement1;
      return this.apiClient.callApi(
        '/spaces/{space}/labels/{label-id}/relations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create label relation
     * Assign an existing label to an existing entity by id
     * @param {String} space 
     * @param {String} labelId 
     * @param {module:model/CreateLabelRelation} createLabelRelation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelRelationElement1}
     */
    createLabelRelation(space, labelId, createLabelRelation) {
      return this.createLabelRelationWithHttpInfo(space, labelId, createLabelRelation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Label
     * Deletes an existing label by id
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelDeleteResponse} and HTTP response
     */
    deleteLabelWithHttpInfo(space, labelId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling deleteLabel");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling deleteLabel");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelDeleteResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/labels/{label-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Label
     * Deletes an existing label by id
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelDeleteResponse}
     */
    deleteLabel(space, labelId) {
      return this.deleteLabelWithHttpInfo(space, labelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Labels
     * List of all the labels for an space
     * @param {String} space 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mqtt filter by labels with mqtt enabled
     * @param {String} opts.entityId filter that shows labels of a certain entity
     * @param {String} opts.entityType filter that shows labels of a certain entity type
     * @param {String} opts.collectionName filter that shows labels of a certain collection. **Only available for thing entities**
     * @param {String} opts.labelName filter that shows labels by label_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelListResponse} and HTTP response
     */
    listLabelWithHttpInfo(space, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listLabel");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
        'mqtt': opts['mqtt'],
        'entity_id': opts['entityId'],
        'entity_type': opts['entityType'],
        'collection_name': opts['collectionName'],
        'label_name': opts['labelName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelListResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Labels
     * List of all the labels for an space
     * @param {String} space 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mqtt filter by labels with mqtt enabled
     * @param {String} opts.entityId filter that shows labels of a certain entity
     * @param {String} opts.entityType filter that shows labels of a certain entity type
     * @param {String} opts.collectionName filter that shows labels of a certain collection. **Only available for thing entities**
     * @param {String} opts.labelName filter that shows labels by label_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelListResponse}
     */
    listLabel(space, opts) {
      return this.listLabelWithHttpInfo(space, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show Label
     * Show an existing label by id
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelListElement1} and HTTP response
     */
    showLabelWithHttpInfo(space, labelId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showLabel");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling showLabel");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelListElement1;
      return this.apiClient.callApi(
        '/spaces/{space}/labels/{label-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show Label
     * Show an existing label by id
     * @param {String} space 
     * @param {String} labelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelListElement1}
     */
    showLabel(space, labelId) {
      return this.showLabelWithHttpInfo(space, labelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show Label Items
     * Show an existing label by name and entities associated to it
     * @param {String} space 
     * @param {String} labelId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.entityType filter that shows only entities of a certain type
     * @param {String} opts.collectionName filter that shows only entities from a certain collection. **Only available for thing entities**
     * @param {String} opts.entityId filter that shows only the entities that have this label
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelListElementRelations} and HTTP response
     */
    showLabelItemsWithHttpInfo(space, labelId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showLabelItems");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling showLabelItems");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
        'entity_type': opts['entityType'],
        'collection_name': opts['collectionName'],
        'entity_id': opts['entityId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelListElementRelations;
      return this.apiClient.callApi(
        '/spaces/{space}/labels/{label-id}/relations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show Label Items
     * Show an existing label by name and entities associated to it
     * @param {String} space 
     * @param {String} labelId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.entityType filter that shows only entities of a certain type
     * @param {String} opts.collectionName filter that shows only entities from a certain collection. **Only available for thing entities**
     * @param {String} opts.entityId filter that shows only the entities that have this label
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelListElementRelations}
     */
    showLabelItems(space, labelId, opts) {
      return this.showLabelItemsWithHttpInfo(space, labelId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update label
     * Update an existing label
     * @param {String} space 
     * @param {String} labelId 
     * @param {module:model/CreateLabel} createLabel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLabelResponse} and HTTP response
     */
    updateLabelWithHttpInfo(space, labelId, createLabel) {
      let postBody = createLabel;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateLabel");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling updateLabel");
      }
      // verify the required parameter 'createLabel' is set
      if (createLabel === undefined || createLabel === null) {
        throw new Error("Missing the required parameter 'createLabel' when calling updateLabel");
      }

      let pathParams = {
        'space': space,
        'label-id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateLabelResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/labels/{label-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update label
     * Update an existing label
     * @param {String} space 
     * @param {String} labelId 
     * @param {module:model/CreateLabel} createLabel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLabelResponse}
     */
    updateLabel(space, labelId, createLabel) {
      return this.updateLabelWithHttpInfo(space, labelId, createLabel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
