/**
 * Users API reference
 * Users OpenAPI endpoints - OpenAPI 3.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseError from '../model/BaseError';
import CollectionListResponse from '../model/CollectionListResponse';
import CollectionRequest from '../model/CollectionRequest';
import CollectionResponse from '../model/CollectionResponse';
import CollectionUpdateRequest from '../model/CollectionUpdateRequest';
import CollectionUpdateResponse from '../model/CollectionUpdateResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Collections service.
* @module api/CollectionsApi
* @version 1.0.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create collection
     * @param {String} space 
     * @param {module:model/CollectionRequest} collectionRequest Create a new collection in the platform
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponse} and HTTP response
     */
    addCollectionWithHttpInfo(space, collectionRequest) {
      let postBody = collectionRequest;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling addCollection");
      }
      // verify the required parameter 'collectionRequest' is set
      if (collectionRequest === undefined || collectionRequest === null) {
        throw new Error("Missing the required parameter 'collectionRequest' when calling addCollection");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create collection
     * @param {String} space 
     * @param {module:model/CollectionRequest} collectionRequest Create a new collection in the platform
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponse}
     */
    addCollection(space, collectionRequest) {
      return this.addCollectionWithHttpInfo(space, collectionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete collection
     * @param {String} space 
     * @param {String} collectionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCollectionWithHttpInfo(space, collectionName) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling deleteCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling deleteCollection");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete collection
     * @param {String} space 
     * @param {String} collectionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCollection(space, collectionName) {
      return this.deleteCollectionWithHttpInfo(space, collectionName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List collections
     * @param {String} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionListResponse} and HTTP response
     */
    listCollectionsWithHttpInfo(space) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listCollections");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionListResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List collections
     * @param {String} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionListResponse}
     */
    listCollections(space) {
      return this.listCollectionsWithHttpInfo(space)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show collection
     * @param {String} space 
     * @param {String} collectionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponse} and HTTP response
     */
    showCollectionWithHttpInfo(space, collectionName) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling showCollection");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show collection
     * @param {String} space 
     * @param {String} collectionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponse}
     */
    showCollection(space, collectionName) {
      return this.showCollectionWithHttpInfo(space, collectionName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update collection
     * @param {String} space 
     * @param {String} collectionName 
     * @param {module:model/CollectionUpdateRequest} collectionUpdateRequest Update an existent collection by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionUpdateResponse} and HTTP response
     */
    updateCollectionWithHttpInfo(space, collectionName, collectionUpdateRequest) {
      let postBody = collectionUpdateRequest;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling updateCollection");
      }
      // verify the required parameter 'collectionUpdateRequest' is set
      if (collectionUpdateRequest === undefined || collectionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'collectionUpdateRequest' when calling updateCollection");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollectionUpdateResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update collection
     * @param {String} space 
     * @param {String} collectionName 
     * @param {module:model/CollectionUpdateRequest} collectionUpdateRequest Update an existent collection by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionUpdateResponse}
     */
    updateCollection(space, collectionName, collectionUpdateRequest) {
      return this.updateCollectionWithHttpInfo(space, collectionName, collectionUpdateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
