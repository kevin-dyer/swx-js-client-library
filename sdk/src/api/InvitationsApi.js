/**
 * Users API reference
 * Users OpenAPI endpoints - OpenAPI 3.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Invitation from '../model/Invitation';
import InvitationUpdate from '../model/InvitationUpdate';

/**
* Invitations service.
* @module api/InvitationsApi
* @version 1.0.0
*/
export default class InvitationsApi {

    /**
    * Constructs a new InvitationsApi. 
    * @alias module:api/InvitationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete an Invitation sent from Space
     * @param {String} space 
     * @param {String} invitationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSentInvitationWithHttpInfo(space, invitationId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling deleteSentInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling deleteSentInvitation");
      }

      let pathParams = {
        'space': space,
        'invitation_id': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{space}/invitations/{invitation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Invitation sent from Space
     * @param {String} space 
     * @param {String} invitationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSentInvitation(space, invitationId) {
      return this.deleteSentInvitationWithHttpInfo(space, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an Invitation sent from a Space
     * @param {String} space 
     * @param {String} invitationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    getSentInvitationWithHttpInfo(space, invitationId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling getSentInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling getSentInvitation");
      }

      let pathParams = {
        'space': space,
        'invitation_id': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/spaces/{space}/invitations/{invitation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an Invitation sent from a Space
     * @param {String} space 
     * @param {String} invitationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    getSentInvitation(space, invitationId) {
      return this.getSentInvitationWithHttpInfo(space, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Invitations sent from a Space
     * @param {String} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invitation>} and HTTP response
     */
    listSentInvitationsWithHttpInfo(space) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listSentInvitations");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/spaces/{space}/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Invitations sent from a Space
     * @param {String} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invitation>}
     */
    listSentInvitations(space) {
      return this.listSentInvitationsWithHttpInfo(space)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Invitation
     * @param {String} space 
     * @param {String} invitationId 
     * @param {module:model/InvitationUpdate} invitationUpdate Body of a the updated Invitation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invitation} and HTTP response
     */
    updateSentInvitationWithHttpInfo(space, invitationId, invitationUpdate) {
      let postBody = invitationUpdate;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateSentInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling updateSentInvitation");
      }
      // verify the required parameter 'invitationUpdate' is set
      if (invitationUpdate === undefined || invitationUpdate === null) {
        throw new Error("Missing the required parameter 'invitationUpdate' when calling updateSentInvitation");
      }

      let pathParams = {
        'space': space,
        'invitation_id': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/spaces/{space}/invitations/{invitation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Invitation
     * @param {String} space 
     * @param {String} invitationId 
     * @param {module:model/InvitationUpdate} invitationUpdate Body of a the updated Invitation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invitation}
     */
    updateSentInvitation(space, invitationId, invitationUpdate) {
      return this.updateSentInvitationWithHttpInfo(space, invitationId, invitationUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
