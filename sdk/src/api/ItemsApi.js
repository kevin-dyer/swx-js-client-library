/**
 * Digital Model API (WIP)
 * Digital Model API documentation
 *
 * The version of the OpenAPI document: 0.8.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ThingStatusListResponse from '../model/ThingStatusListResponse';
import ThingStatusResponse from '../model/ThingStatusResponse';

/**
* Items service.
* @module api/ItemsApi
* @version 0.8.12
*/
export default class ItemsApi {

    /**
    * Constructs a new ItemsApi. 
    * @alias module:api/ItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List items
     * @param {String} space 
     * @param {String} collectionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThingStatusListResponse} and HTTP response
     */
    listItemsWithHttpInfo(space, collectionName) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listItems");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling listItems");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThingStatusListResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List items
     * @param {String} space 
     * @param {String} collectionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThingStatusListResponse}
     */
    listItems(space, collectionName) {
      return this.listItemsWithHttpInfo(space, collectionName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show item
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThingStatusResponse} and HTTP response
     */
    showItemWithHttpInfo(space, collectionName, thingId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling showItem");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling showItem");
      }
      // verify the required parameter 'thingId' is set
      if (thingId === undefined || thingId === null) {
        throw new Error("Missing the required parameter 'thingId' when calling showItem");
      }

      let pathParams = {
        'space': space,
        'collection-name': collectionName,
        'thing-id': thingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThingStatusResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/collections/{collection-name}/things-status/{thing-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Show item
     * @param {String} space 
     * @param {String} collectionName 
     * @param {String} thingId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThingStatusResponse}
     */
    showItem(space, collectionName, thingId) {
      return this.showItemWithHttpInfo(space, collectionName, thingId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
