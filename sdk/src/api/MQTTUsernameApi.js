/**
 * MQTT API reference
 * MQTT OpenAPI endpoints - OpenAPI 3.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthZError from '../model/AuthZError';
import BadFormedError from '../model/BadFormedError';
import BaseError from '../model/BaseError';
import UpdateMQTTCredentialsResponse from '../model/UpdateMQTTCredentialsResponse';
import UpdateMQTTPassword from '../model/UpdateMQTTPassword';

/**
* MQTTUsername service.
* @module api/MQTTUsernameApi
* @version 1.0.0
*/
export default class MQTTUsernameApi {

    /**
    * Constructs a new MQTTUsernameApi. 
    * @alias module:api/MQTTUsernameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Update MQTT password
     * Update the MQTT password for a specific mqtt-username.  If you send an empty body, a random password will be generated
     * @param {String} space 
     * @param {String} mqttUsername 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMQTTPassword} opts.updateMQTTPassword This is the field that you can update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateMQTTCredentialsResponse} and HTTP response
     */
    updateMQTTpasswordWithHttpInfo(space, mqttUsername, opts) {
      opts = opts || {};
      let postBody = opts['updateMQTTPassword'];
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateMQTTpassword");
      }
      // verify the required parameter 'mqttUsername' is set
      if (mqttUsername === undefined || mqttUsername === null) {
        throw new Error("Missing the required parameter 'mqttUsername' when calling updateMQTTpassword");
      }

      let pathParams = {
        'space': space,
        'mqtt-username': mqttUsername
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMQTTCredentialsResponse;
      return this.apiClient.callApi(
        '/spaces/{space}/mqtt/credentials-username/{mqtt-username}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update MQTT password
     * Update the MQTT password for a specific mqtt-username.  If you send an empty body, a random password will be generated
     * @param {String} space 
     * @param {String} mqttUsername 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMQTTPassword} opts.updateMQTTPassword This is the field that you can update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateMQTTCredentialsResponse}
     */
    updateMQTTpassword(space, mqttUsername, opts) {
      return this.updateMQTTpasswordWithHttpInfo(space, mqttUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
