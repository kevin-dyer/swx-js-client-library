/**
 * Users API reference
 * Users OpenAPI endpoints - OpenAPI 3.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Trigger from '../model/Trigger';
import Triggers from '../model/Triggers';

/**
* Triggers service.
* @module api/TriggersApi
* @version 1.0.0
*/
export default class TriggersApi {

    /**
    * Constructs a new TriggersApi. 
    * @alias module:api/TriggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create and deploy a trigger
     * @param {String} space 
     * @param {module:model/Trigger} trigger Body of a new trigger
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    createTriggerWithHttpInfo(space, trigger) {
      let postBody = trigger;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling createTrigger");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling createTrigger");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/spaces/{space}/triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create and deploy a trigger
     * @param {String} space 
     * @param {module:model/Trigger} trigger Body of a new trigger
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    createTrigger(space, trigger) {
      return this.createTriggerWithHttpInfo(space, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a trigger
     * @param {String} space 
     * @param {String} triggerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTriggerWithHttpInfo(space, triggerId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling deleteTrigger");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling deleteTrigger");
      }

      let pathParams = {
        'space': space,
        'trigger_id': triggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{space}/triggers/{trigger_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a trigger
     * @param {String} space 
     * @param {String} triggerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTrigger(space, triggerId) {
      return this.deleteTriggerWithHttpInfo(space, triggerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a trigger
     * @param {String} space 
     * @param {String} triggerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    getTriggerWithHttpInfo(space, triggerId) {
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling getTrigger");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling getTrigger");
      }

      let pathParams = {
        'space': space,
        'trigger_id': triggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/spaces/{space}/triggers/{trigger_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a trigger
     * @param {String} space 
     * @param {String} triggerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    getTrigger(space, triggerId) {
      return this.getTriggerWithHttpInfo(space, triggerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Triggers
     * @param {String} space 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Triggers} and HTTP response
     */
    listTriggersWithHttpInfo(space, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling listTriggers");
      }

      let pathParams = {
        'space': space
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Triggers;
      return this.apiClient.callApi(
        '/spaces/{space}/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Triggers
     * @param {String} space 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Triggers}
     */
    listTriggers(space, opts) {
      return this.listTriggersWithHttpInfo(space, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a trigger
     * @param {String} space 
     * @param {String} triggerId 
     * @param {module:model/Trigger} trigger Body of the updated trigger
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Trigger} and HTTP response
     */
    updateTriggerWithHttpInfo(space, triggerId, trigger) {
      let postBody = trigger;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateTrigger");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling updateTrigger");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling updateTrigger");
      }

      let pathParams = {
        'space': space,
        'trigger_id': triggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken', 'OAuth2AuthorizationCode', 'OAuth2ClientCredentials', 'OAuth2Security', 'OAuth2Security', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/spaces/{space}/triggers/{trigger_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a trigger
     * @param {String} space 
     * @param {String} triggerId 
     * @param {module:model/Trigger} trigger Body of the updated trigger
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Trigger}
     */
    updateTrigger(space, triggerId, trigger) {
      return this.updateTriggerWithHttpInfo(space, triggerId, trigger)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
